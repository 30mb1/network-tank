"""
This file was auto generated by nekoton.
"""

from typing import TypedDict as _TypedDict, Optional as _Optional
from nekoton import (
    FunctionCall as _FunctionCall,
    FunctionAbi as _FunctionAbi,
    Cell as _Cell,
    Address as _Address,
    Transaction as _Transaction,
    FunctionAbiWithArgs as _FunctionAbiWithArgs,
    ContractAbi as _ContractAbi,
    Tokens as _Tokens,
)


TOKENWALLET_ABI = _ContractAbi(
    r"""{"ABI version": 2, "version": "2.2", "header": ["pubkey", "time", "expire"], "functions": [{"name": "constructor", "inputs": [], "outputs": []}, {"name": "supportsInterface", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "interfaceID", "type": "uint32"}], "outputs": [{"name": "value0", "type": "bool"}]}, {"name": "destroy", "inputs": [{"name": "remainingGasTo", "type": "address"}], "outputs": []}, {"name": "burnByRoot", "inputs": [{"name": "amount", "type": "uint128"}, {"name": "remainingGasTo", "type": "address"}, {"name": "callbackTo", "type": "address"}, {"name": "payload", "type": "cell"}], "outputs": []}, {"name": "burn", "inputs": [{"name": "amount", "type": "uint128"}, {"name": "remainingGasTo", "type": "address"}, {"name": "callbackTo", "type": "address"}, {"name": "payload", "type": "cell"}], "outputs": []}, {"name": "balance", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "uint128"}]}, {"name": "owner", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "address"}]}, {"name": "root", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "address"}]}, {"name": "walletCode", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "transfer", "inputs": [{"name": "amount", "type": "uint128"}, {"name": "recipient", "type": "address"}, {"name": "deployWalletValue", "type": "uint128"}, {"name": "remainingGasTo", "type": "address"}, {"name": "notify", "type": "bool"}, {"name": "payload", "type": "cell"}], "outputs": []}, {"name": "transferToWallet", "inputs": [{"name": "amount", "type": "uint128"}, {"name": "recipientTokenWallet", "type": "address"}, {"name": "remainingGasTo", "type": "address"}, {"name": "notify", "type": "bool"}, {"name": "payload", "type": "cell"}], "outputs": []}, {"name": "acceptTransfer", "id": "0x67A0B95F", "inputs": [{"name": "amount", "type": "uint128"}, {"name": "sender", "type": "address"}, {"name": "remainingGasTo", "type": "address"}, {"name": "notify", "type": "bool"}, {"name": "payload", "type": "cell"}], "outputs": []}, {"name": "acceptMint", "id": "0x4384F298", "inputs": [{"name": "amount", "type": "uint128"}, {"name": "remainingGasTo", "type": "address"}, {"name": "notify", "type": "bool"}, {"name": "payload", "type": "cell"}], "outputs": []}, {"name": "sendSurplusGas", "inputs": [{"name": "to", "type": "address"}], "outputs": []}], "data": [{"key": 1, "name": "root_", "type": "address"}, {"key": 2, "name": "owner_", "type": "address"}], "events": [], "fields": [{"name": "_pubkey", "type": "uint256"}, {"name": "_timestamp", "type": "uint64"}, {"name": "_constructorFlag", "type": "bool"}, {"name": "root_", "type": "address"}, {"name": "owner_", "type": "address"}, {"name": "balance_", "type": "uint128"}]}"""
)


class ConstructorInput(_TypedDict):
    pass


class ConstructorOutput(_TypedDict):
    pass


class TokenWalletConstructorFunctionCall(_FunctionCall):
    @property
    def input(self) -> ConstructorInput:
        return _FunctionCall.input

    @property
    def output(self) -> ConstructorOutput:
        return _FunctionCall.output


class SupportsInterfaceInput(_TypedDict):
    answerId: int | _Tokens
    interfaceID: int | _Tokens


class SupportsInterfaceOutput(_TypedDict):
    value0: bool


class TokenWalletSupportsInterfaceFunctionCall(_FunctionCall):
    @property
    def input(self) -> SupportsInterfaceInput:
        return _FunctionCall.input

    @property
    def output(self) -> SupportsInterfaceOutput:
        return _FunctionCall.output


class DestroyInput(_TypedDict):
    remainingGasTo: _Address


class DestroyOutput(_TypedDict):
    pass


class TokenWalletDestroyFunctionCall(_FunctionCall):
    @property
    def input(self) -> DestroyInput:
        return _FunctionCall.input

    @property
    def output(self) -> DestroyOutput:
        return _FunctionCall.output


class BurnByRootInput(_TypedDict):
    amount: int | _Tokens
    remainingGasTo: _Address
    callbackTo: _Address
    payload: _Cell


class BurnByRootOutput(_TypedDict):
    pass


class TokenWalletBurnByRootFunctionCall(_FunctionCall):
    @property
    def input(self) -> BurnByRootInput:
        return _FunctionCall.input

    @property
    def output(self) -> BurnByRootOutput:
        return _FunctionCall.output


class BurnInput(_TypedDict):
    amount: int | _Tokens
    remainingGasTo: _Address
    callbackTo: _Address
    payload: _Cell


class BurnOutput(_TypedDict):
    pass


class TokenWalletBurnFunctionCall(_FunctionCall):
    @property
    def input(self) -> BurnInput:
        return _FunctionCall.input

    @property
    def output(self) -> BurnOutput:
        return _FunctionCall.output


class BalanceInput(_TypedDict):
    answerId: int | _Tokens


class BalanceOutput(_TypedDict):
    value0: int | _Tokens


class TokenWalletBalanceFunctionCall(_FunctionCall):
    @property
    def input(self) -> BalanceInput:
        return _FunctionCall.input

    @property
    def output(self) -> BalanceOutput:
        return _FunctionCall.output


class OwnerInput(_TypedDict):
    answerId: int | _Tokens


class OwnerOutput(_TypedDict):
    value0: _Address


class TokenWalletOwnerFunctionCall(_FunctionCall):
    @property
    def input(self) -> OwnerInput:
        return _FunctionCall.input

    @property
    def output(self) -> OwnerOutput:
        return _FunctionCall.output


class RootInput(_TypedDict):
    answerId: int | _Tokens


class RootOutput(_TypedDict):
    value0: _Address


class TokenWalletRootFunctionCall(_FunctionCall):
    @property
    def input(self) -> RootInput:
        return _FunctionCall.input

    @property
    def output(self) -> RootOutput:
        return _FunctionCall.output


class WalletCodeInput(_TypedDict):
    answerId: int | _Tokens


class WalletCodeOutput(_TypedDict):
    value0: _Cell


class TokenWalletWalletCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> WalletCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> WalletCodeOutput:
        return _FunctionCall.output


class TransferInput(_TypedDict):
    amount: int | _Tokens
    recipient: _Address
    deployWalletValue: int | _Tokens
    remainingGasTo: _Address
    notify: bool
    payload: _Cell


class TransferOutput(_TypedDict):
    pass


class TokenWalletTransferFunctionCall(_FunctionCall):
    @property
    def input(self) -> TransferInput:
        return _FunctionCall.input

    @property
    def output(self) -> TransferOutput:
        return _FunctionCall.output


class TransferToWalletInput(_TypedDict):
    amount: int | _Tokens
    recipientTokenWallet: _Address
    remainingGasTo: _Address
    notify: bool
    payload: _Cell


class TransferToWalletOutput(_TypedDict):
    pass


class TokenWalletTransferToWalletFunctionCall(_FunctionCall):
    @property
    def input(self) -> TransferToWalletInput:
        return _FunctionCall.input

    @property
    def output(self) -> TransferToWalletOutput:
        return _FunctionCall.output


class AcceptTransferInput(_TypedDict):
    amount: int | _Tokens
    sender: _Address
    remainingGasTo: _Address
    notify: bool
    payload: _Cell


class AcceptTransferOutput(_TypedDict):
    pass


class TokenWalletAcceptTransferFunctionCall(_FunctionCall):
    @property
    def input(self) -> AcceptTransferInput:
        return _FunctionCall.input

    @property
    def output(self) -> AcceptTransferOutput:
        return _FunctionCall.output


class AcceptMintInput(_TypedDict):
    amount: int | _Tokens
    remainingGasTo: _Address
    notify: bool
    payload: _Cell


class AcceptMintOutput(_TypedDict):
    pass


class TokenWalletAcceptMintFunctionCall(_FunctionCall):
    @property
    def input(self) -> AcceptMintInput:
        return _FunctionCall.input

    @property
    def output(self) -> AcceptMintOutput:
        return _FunctionCall.output


class SendSurplusGasInput(_TypedDict):
    to: _Address


class SendSurplusGasOutput(_TypedDict):
    pass


class TokenWalletSendSurplusGasFunctionCall(_FunctionCall):
    @property
    def input(self) -> SendSurplusGasInput:
        return _FunctionCall.input

    @property
    def output(self) -> SendSurplusGasOutput:
        return _FunctionCall.output


class TokenWalletConstructorFunction(_FunctionAbi):
    def with_args(self, args: ConstructorInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ConstructorInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ConstructorOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletConstructorFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletSupportsInterfaceFunction(_FunctionAbi):
    def with_args(self, args: SupportsInterfaceInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SupportsInterfaceInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SupportsInterfaceOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletSupportsInterfaceFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletDestroyFunction(_FunctionAbi):
    def with_args(self, args: DestroyInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> DestroyInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DestroyOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletDestroyFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletBurnByRootFunction(_FunctionAbi):
    def with_args(self, args: BurnByRootInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BurnByRootInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> BurnByRootOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletBurnByRootFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletBurnFunction(_FunctionAbi):
    def with_args(self, args: BurnInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> BurnInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> BurnOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletBurnFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletBalanceFunction(_FunctionAbi):
    def with_args(self, args: BalanceInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> BalanceInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> BalanceOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletBalanceFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletOwnerFunction(_FunctionAbi):
    def with_args(self, args: OwnerInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> OwnerInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> OwnerOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletOwnerFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletRootFunction(_FunctionAbi):
    def with_args(self, args: RootInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> RootInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> RootOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletRootFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletWalletCodeFunction(_FunctionAbi):
    def with_args(self, args: WalletCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> WalletCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> WalletCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletWalletCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletTransferFunction(_FunctionAbi):
    def with_args(self, args: TransferInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> TransferInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> TransferOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletTransferFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletTransferToWalletFunction(_FunctionAbi):
    def with_args(self, args: TransferToWalletInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> TransferToWalletInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> TransferToWalletOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletTransferToWalletFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletAcceptTransferFunction(_FunctionAbi):
    def with_args(self, args: AcceptTransferInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> AcceptTransferInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> AcceptTransferOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletAcceptTransferFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletAcceptMintFunction(_FunctionAbi):
    def with_args(self, args: AcceptMintInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> AcceptMintInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> AcceptMintOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletAcceptMintFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletSendSurplusGasFunction(_FunctionAbi):
    def with_args(self, args: SendSurplusGasInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SendSurplusGasInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SendSurplusGasOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenWalletSendSurplusGasFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenWalletAbi:
    @staticmethod
    def constructor() -> TokenWalletConstructorFunction:
        return TOKENWALLET_ABI.get_function("constructor")

    @staticmethod
    def supports_interface() -> TokenWalletSupportsInterfaceFunction:
        return TOKENWALLET_ABI.get_function("supportsInterface")

    @staticmethod
    def destroy() -> TokenWalletDestroyFunction:
        return TOKENWALLET_ABI.get_function("destroy")

    @staticmethod
    def burn_by_root() -> TokenWalletBurnByRootFunction:
        return TOKENWALLET_ABI.get_function("burnByRoot")

    @staticmethod
    def burn() -> TokenWalletBurnFunction:
        return TOKENWALLET_ABI.get_function("burn")

    @staticmethod
    def balance() -> TokenWalletBalanceFunction:
        return TOKENWALLET_ABI.get_function("balance")

    @staticmethod
    def owner() -> TokenWalletOwnerFunction:
        return TOKENWALLET_ABI.get_function("owner")

    @staticmethod
    def root() -> TokenWalletRootFunction:
        return TOKENWALLET_ABI.get_function("root")

    @staticmethod
    def wallet_code() -> TokenWalletWalletCodeFunction:
        return TOKENWALLET_ABI.get_function("walletCode")

    @staticmethod
    def transfer() -> TokenWalletTransferFunction:
        return TOKENWALLET_ABI.get_function("transfer")

    @staticmethod
    def transfer_to_wallet() -> TokenWalletTransferToWalletFunction:
        return TOKENWALLET_ABI.get_function("transferToWallet")

    @staticmethod
    def accept_transfer() -> TokenWalletAcceptTransferFunction:
        return TOKENWALLET_ABI.get_function("acceptTransfer")

    @staticmethod
    def accept_mint() -> TokenWalletAcceptMintFunction:
        return TOKENWALLET_ABI.get_function("acceptMint")

    @staticmethod
    def send_surplus_gas() -> TokenWalletSendSurplusGasFunction:
        return TOKENWALLET_ABI.get_function("sendSurplusGas")
