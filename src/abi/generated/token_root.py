"""
This file was auto generated by nekoton.
"""

from typing import Optional as _Optional, TypedDict as _TypedDict, Dict as _Dict
from nekoton import (
    FunctionAbi as _FunctionAbi,
    Transaction as _Transaction,
    FunctionAbiWithArgs as _FunctionAbiWithArgs,
    Tokens as _Tokens,
    Cell as _Cell,
    FunctionCall as _FunctionCall,
    ContractAbi as _ContractAbi,
    Address as _Address,
)


TOKENROOT_ABI = _ContractAbi(
    r"""{"ABI version": 2, "version": "2.2", "header": ["pubkey", "time", "expire"], "functions": [{"name": "constructor", "inputs": [{"name": "initialSupplyTo", "type": "address"}, {"name": "initialSupply", "type": "uint128"}, {"name": "deployWalletValue", "type": "uint128"}, {"name": "mintDisabled", "type": "bool"}, {"name": "burnByRootDisabled", "type": "bool"}, {"name": "burnPaused", "type": "bool"}, {"name": "remainingGasTo", "type": "address"}], "outputs": []}, {"name": "supportsInterface", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "interfaceID", "type": "uint32"}], "outputs": [{"name": "value0", "type": "bool"}]}, {"name": "disableMint", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "bool"}]}, {"name": "mintDisabled", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "bool"}]}, {"name": "burnTokens", "inputs": [{"name": "amount", "type": "uint128"}, {"name": "walletOwner", "type": "address"}, {"name": "remainingGasTo", "type": "address"}, {"name": "callbackTo", "type": "address"}, {"name": "payload", "type": "cell"}], "outputs": []}, {"name": "disableBurnByRoot", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "bool"}]}, {"name": "burnByRootDisabled", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "bool"}]}, {"name": "burnPaused", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "bool"}]}, {"name": "setBurnPaused", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "paused", "type": "bool"}], "outputs": [{"name": "value0", "type": "bool"}]}, {"name": "transferOwnership", "inputs": [{"name": "newOwner", "type": "address"}, {"name": "remainingGasTo", "type": "address"}, {"components": [{"name": "value", "type": "uint128"}, {"name": "payload", "type": "cell"}], "name": "callbacks", "type": "map(address,tuple)"}], "outputs": []}, {"name": "name", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "string"}]}, {"name": "symbol", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "string"}]}, {"name": "decimals", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "uint8"}]}, {"name": "totalSupply", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "uint128"}]}, {"name": "walletCode", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "rootOwner", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "address"}]}, {"name": "walletOf", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "walletOwner", "type": "address"}], "outputs": [{"name": "value0", "type": "address"}]}, {"name": "deployWallet", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "walletOwner", "type": "address"}, {"name": "deployWalletValue", "type": "uint128"}], "outputs": [{"name": "tokenWallet", "type": "address"}]}, {"name": "mint", "inputs": [{"name": "amount", "type": "uint128"}, {"name": "recipient", "type": "address"}, {"name": "deployWalletValue", "type": "uint128"}, {"name": "remainingGasTo", "type": "address"}, {"name": "notify", "type": "bool"}, {"name": "payload", "type": "cell"}], "outputs": []}, {"name": "acceptBurn", "id": "0x192B51B1", "inputs": [{"name": "amount", "type": "uint128"}, {"name": "walletOwner", "type": "address"}, {"name": "remainingGasTo", "type": "address"}, {"name": "callbackTo", "type": "address"}, {"name": "payload", "type": "cell"}], "outputs": []}, {"name": "sendSurplusGas", "inputs": [{"name": "to", "type": "address"}], "outputs": []}], "data": [{"key": 1, "name": "name_", "type": "string"}, {"key": 2, "name": "symbol_", "type": "string"}, {"key": 3, "name": "decimals_", "type": "uint8"}, {"key": 4, "name": "rootOwner_", "type": "address"}, {"key": 5, "name": "walletCode_", "type": "cell"}, {"key": 6, "name": "randomNonce_", "type": "uint256"}, {"key": 7, "name": "deployer_", "type": "address"}], "events": [], "fields": [{"name": "_pubkey", "type": "uint256"}, {"name": "_timestamp", "type": "uint64"}, {"name": "_constructorFlag", "type": "bool"}, {"name": "name_", "type": "string"}, {"name": "symbol_", "type": "string"}, {"name": "decimals_", "type": "uint8"}, {"name": "rootOwner_", "type": "address"}, {"name": "walletCode_", "type": "cell"}, {"name": "totalSupply_", "type": "uint128"}, {"name": "burnPaused_", "type": "bool"}, {"name": "burnByRootDisabled_", "type": "bool"}, {"name": "mintDisabled_", "type": "bool"}, {"name": "randomNonce_", "type": "uint256"}, {"name": "deployer_", "type": "address"}]}"""
)


class ConstructorInput(_TypedDict):
    initialSupplyTo: _Address
    initialSupply: int | _Tokens
    deployWalletValue: int | _Tokens
    mintDisabled: bool
    burnByRootDisabled: bool
    burnPaused: bool
    remainingGasTo: _Address


class ConstructorOutput(_TypedDict):
    pass


class TokenRootConstructorFunctionCall(_FunctionCall):
    @property
    def input(self) -> ConstructorInput:
        return _FunctionCall.input

    @property
    def output(self) -> ConstructorOutput:
        return _FunctionCall.output


class SupportsInterfaceInput(_TypedDict):
    answerId: int | _Tokens
    interfaceID: int | _Tokens


class SupportsInterfaceOutput(_TypedDict):
    value0: bool


class TokenRootSupportsInterfaceFunctionCall(_FunctionCall):
    @property
    def input(self) -> SupportsInterfaceInput:
        return _FunctionCall.input

    @property
    def output(self) -> SupportsInterfaceOutput:
        return _FunctionCall.output


class DisableMintInput(_TypedDict):
    answerId: int | _Tokens


class DisableMintOutput(_TypedDict):
    value0: bool


class TokenRootDisableMintFunctionCall(_FunctionCall):
    @property
    def input(self) -> DisableMintInput:
        return _FunctionCall.input

    @property
    def output(self) -> DisableMintOutput:
        return _FunctionCall.output


class MintDisabledInput(_TypedDict):
    answerId: int | _Tokens


class MintDisabledOutput(_TypedDict):
    value0: bool


class TokenRootMintDisabledFunctionCall(_FunctionCall):
    @property
    def input(self) -> MintDisabledInput:
        return _FunctionCall.input

    @property
    def output(self) -> MintDisabledOutput:
        return _FunctionCall.output


class BurnTokensInput(_TypedDict):
    amount: int | _Tokens
    walletOwner: _Address
    remainingGasTo: _Address
    callbackTo: _Address
    payload: _Cell


class BurnTokensOutput(_TypedDict):
    pass


class TokenRootBurnTokensFunctionCall(_FunctionCall):
    @property
    def input(self) -> BurnTokensInput:
        return _FunctionCall.input

    @property
    def output(self) -> BurnTokensOutput:
        return _FunctionCall.output


class DisableBurnByRootInput(_TypedDict):
    answerId: int | _Tokens


class DisableBurnByRootOutput(_TypedDict):
    value0: bool


class TokenRootDisableBurnByRootFunctionCall(_FunctionCall):
    @property
    def input(self) -> DisableBurnByRootInput:
        return _FunctionCall.input

    @property
    def output(self) -> DisableBurnByRootOutput:
        return _FunctionCall.output


class BurnByRootDisabledInput(_TypedDict):
    answerId: int | _Tokens


class BurnByRootDisabledOutput(_TypedDict):
    value0: bool


class TokenRootBurnByRootDisabledFunctionCall(_FunctionCall):
    @property
    def input(self) -> BurnByRootDisabledInput:
        return _FunctionCall.input

    @property
    def output(self) -> BurnByRootDisabledOutput:
        return _FunctionCall.output


class BurnPausedInput(_TypedDict):
    answerId: int | _Tokens


class BurnPausedOutput(_TypedDict):
    value0: bool


class TokenRootBurnPausedFunctionCall(_FunctionCall):
    @property
    def input(self) -> BurnPausedInput:
        return _FunctionCall.input

    @property
    def output(self) -> BurnPausedOutput:
        return _FunctionCall.output


class SetBurnPausedInput(_TypedDict):
    answerId: int | _Tokens
    paused: bool


class SetBurnPausedOutput(_TypedDict):
    value0: bool


class TokenRootSetBurnPausedFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetBurnPausedInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetBurnPausedOutput:
        return _FunctionCall.output


class InternalStruct0(_TypedDict):
    value: int | _Tokens
    payload: _Cell


class TransferOwnershipInput(_TypedDict):
    newOwner: _Address
    remainingGasTo: _Address
    callbacks: _Dict[_Address, InternalStruct0]


class TransferOwnershipOutput(_TypedDict):
    pass


class TokenRootTransferOwnershipFunctionCall(_FunctionCall):
    @property
    def input(self) -> TransferOwnershipInput:
        return _FunctionCall.input

    @property
    def output(self) -> TransferOwnershipOutput:
        return _FunctionCall.output


class NameInput(_TypedDict):
    answerId: int | _Tokens


class NameOutput(_TypedDict):
    value0: str


class TokenRootNameFunctionCall(_FunctionCall):
    @property
    def input(self) -> NameInput:
        return _FunctionCall.input

    @property
    def output(self) -> NameOutput:
        return _FunctionCall.output


class SymbolInput(_TypedDict):
    answerId: int | _Tokens


class SymbolOutput(_TypedDict):
    value0: str


class TokenRootSymbolFunctionCall(_FunctionCall):
    @property
    def input(self) -> SymbolInput:
        return _FunctionCall.input

    @property
    def output(self) -> SymbolOutput:
        return _FunctionCall.output


class DecimalsInput(_TypedDict):
    answerId: int | _Tokens


class DecimalsOutput(_TypedDict):
    value0: int | _Tokens


class TokenRootDecimalsFunctionCall(_FunctionCall):
    @property
    def input(self) -> DecimalsInput:
        return _FunctionCall.input

    @property
    def output(self) -> DecimalsOutput:
        return _FunctionCall.output


class TotalSupplyInput(_TypedDict):
    answerId: int | _Tokens


class TotalSupplyOutput(_TypedDict):
    value0: int | _Tokens


class TokenRootTotalSupplyFunctionCall(_FunctionCall):
    @property
    def input(self) -> TotalSupplyInput:
        return _FunctionCall.input

    @property
    def output(self) -> TotalSupplyOutput:
        return _FunctionCall.output


class WalletCodeInput(_TypedDict):
    answerId: int | _Tokens


class WalletCodeOutput(_TypedDict):
    value0: _Cell


class TokenRootWalletCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> WalletCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> WalletCodeOutput:
        return _FunctionCall.output


class RootOwnerInput(_TypedDict):
    answerId: int | _Tokens


class RootOwnerOutput(_TypedDict):
    value0: _Address


class TokenRootRootOwnerFunctionCall(_FunctionCall):
    @property
    def input(self) -> RootOwnerInput:
        return _FunctionCall.input

    @property
    def output(self) -> RootOwnerOutput:
        return _FunctionCall.output


class WalletOfInput(_TypedDict):
    answerId: int | _Tokens
    walletOwner: _Address


class WalletOfOutput(_TypedDict):
    value0: _Address


class TokenRootWalletOfFunctionCall(_FunctionCall):
    @property
    def input(self) -> WalletOfInput:
        return _FunctionCall.input

    @property
    def output(self) -> WalletOfOutput:
        return _FunctionCall.output


class DeployWalletInput(_TypedDict):
    answerId: int | _Tokens
    walletOwner: _Address
    deployWalletValue: int | _Tokens


class DeployWalletOutput(_TypedDict):
    tokenWallet: _Address


class TokenRootDeployWalletFunctionCall(_FunctionCall):
    @property
    def input(self) -> DeployWalletInput:
        return _FunctionCall.input

    @property
    def output(self) -> DeployWalletOutput:
        return _FunctionCall.output


class MintInput(_TypedDict):
    amount: int | _Tokens
    recipient: _Address
    deployWalletValue: int | _Tokens
    remainingGasTo: _Address
    notify: bool
    payload: _Cell


class MintOutput(_TypedDict):
    pass


class TokenRootMintFunctionCall(_FunctionCall):
    @property
    def input(self) -> MintInput:
        return _FunctionCall.input

    @property
    def output(self) -> MintOutput:
        return _FunctionCall.output


class AcceptBurnInput(_TypedDict):
    amount: int | _Tokens
    walletOwner: _Address
    remainingGasTo: _Address
    callbackTo: _Address
    payload: _Cell


class AcceptBurnOutput(_TypedDict):
    pass


class TokenRootAcceptBurnFunctionCall(_FunctionCall):
    @property
    def input(self) -> AcceptBurnInput:
        return _FunctionCall.input

    @property
    def output(self) -> AcceptBurnOutput:
        return _FunctionCall.output


class SendSurplusGasInput(_TypedDict):
    to: _Address


class SendSurplusGasOutput(_TypedDict):
    pass


class TokenRootSendSurplusGasFunctionCall(_FunctionCall):
    @property
    def input(self) -> SendSurplusGasInput:
        return _FunctionCall.input

    @property
    def output(self) -> SendSurplusGasOutput:
        return _FunctionCall.output


class TokenRootConstructorFunction(_FunctionAbi):
    def with_args(self, args: ConstructorInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ConstructorInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ConstructorOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootConstructorFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootSupportsInterfaceFunction(_FunctionAbi):
    def with_args(self, args: SupportsInterfaceInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SupportsInterfaceInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SupportsInterfaceOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootSupportsInterfaceFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootDisableMintFunction(_FunctionAbi):
    def with_args(self, args: DisableMintInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> DisableMintInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DisableMintOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootDisableMintFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootMintDisabledFunction(_FunctionAbi):
    def with_args(self, args: MintDisabledInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> MintDisabledInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> MintDisabledOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootMintDisabledFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootBurnTokensFunction(_FunctionAbi):
    def with_args(self, args: BurnTokensInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BurnTokensInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> BurnTokensOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootBurnTokensFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootDisableBurnByRootFunction(_FunctionAbi):
    def with_args(self, args: DisableBurnByRootInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> DisableBurnByRootInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DisableBurnByRootOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootDisableBurnByRootFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootBurnByRootDisabledFunction(_FunctionAbi):
    def with_args(self, args: BurnByRootDisabledInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BurnByRootDisabledInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> BurnByRootDisabledOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootBurnByRootDisabledFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootBurnPausedFunction(_FunctionAbi):
    def with_args(self, args: BurnPausedInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BurnPausedInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> BurnPausedOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootBurnPausedFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootSetBurnPausedFunction(_FunctionAbi):
    def with_args(self, args: SetBurnPausedInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetBurnPausedInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetBurnPausedOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootSetBurnPausedFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootTransferOwnershipFunction(_FunctionAbi):
    def with_args(self, args: TransferOwnershipInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> TransferOwnershipInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> TransferOwnershipOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootTransferOwnershipFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootNameFunction(_FunctionAbi):
    def with_args(self, args: NameInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> NameInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> NameOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootNameFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootSymbolFunction(_FunctionAbi):
    def with_args(self, args: SymbolInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> SymbolInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SymbolOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootSymbolFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootDecimalsFunction(_FunctionAbi):
    def with_args(self, args: DecimalsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> DecimalsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DecimalsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootDecimalsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootTotalSupplyFunction(_FunctionAbi):
    def with_args(self, args: TotalSupplyInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> TotalSupplyInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> TotalSupplyOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootTotalSupplyFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootWalletCodeFunction(_FunctionAbi):
    def with_args(self, args: WalletCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> WalletCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> WalletCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootWalletCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootRootOwnerFunction(_FunctionAbi):
    def with_args(self, args: RootOwnerInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> RootOwnerInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> RootOwnerOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootRootOwnerFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootWalletOfFunction(_FunctionAbi):
    def with_args(self, args: WalletOfInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> WalletOfInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> WalletOfOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootWalletOfFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootDeployWalletFunction(_FunctionAbi):
    def with_args(self, args: DeployWalletInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> DeployWalletInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DeployWalletOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootDeployWalletFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootMintFunction(_FunctionAbi):
    def with_args(self, args: MintInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> MintInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> MintOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootMintFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootAcceptBurnFunction(_FunctionAbi):
    def with_args(self, args: AcceptBurnInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> AcceptBurnInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> AcceptBurnOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootAcceptBurnFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootSendSurplusGasFunction(_FunctionAbi):
    def with_args(self, args: SendSurplusGasInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SendSurplusGasInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SendSurplusGasOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> TokenRootSendSurplusGasFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class TokenRootAbi:
    @staticmethod
    def constructor() -> TokenRootConstructorFunction:
        return TOKENROOT_ABI.get_function("constructor")

    @staticmethod
    def supports_interface() -> TokenRootSupportsInterfaceFunction:
        return TOKENROOT_ABI.get_function("supportsInterface")

    @staticmethod
    def disable_mint() -> TokenRootDisableMintFunction:
        return TOKENROOT_ABI.get_function("disableMint")

    @staticmethod
    def mint_disabled() -> TokenRootMintDisabledFunction:
        return TOKENROOT_ABI.get_function("mintDisabled")

    @staticmethod
    def burn_tokens() -> TokenRootBurnTokensFunction:
        return TOKENROOT_ABI.get_function("burnTokens")

    @staticmethod
    def disable_burn_by_root() -> TokenRootDisableBurnByRootFunction:
        return TOKENROOT_ABI.get_function("disableBurnByRoot")

    @staticmethod
    def burn_by_root_disabled() -> TokenRootBurnByRootDisabledFunction:
        return TOKENROOT_ABI.get_function("burnByRootDisabled")

    @staticmethod
    def burn_paused() -> TokenRootBurnPausedFunction:
        return TOKENROOT_ABI.get_function("burnPaused")

    @staticmethod
    def set_burn_paused() -> TokenRootSetBurnPausedFunction:
        return TOKENROOT_ABI.get_function("setBurnPaused")

    @staticmethod
    def transfer_ownership() -> TokenRootTransferOwnershipFunction:
        return TOKENROOT_ABI.get_function("transferOwnership")

    @staticmethod
    def name() -> TokenRootNameFunction:
        return TOKENROOT_ABI.get_function("name")

    @staticmethod
    def symbol() -> TokenRootSymbolFunction:
        return TOKENROOT_ABI.get_function("symbol")

    @staticmethod
    def decimals() -> TokenRootDecimalsFunction:
        return TOKENROOT_ABI.get_function("decimals")

    @staticmethod
    def total_supply() -> TokenRootTotalSupplyFunction:
        return TOKENROOT_ABI.get_function("totalSupply")

    @staticmethod
    def wallet_code() -> TokenRootWalletCodeFunction:
        return TOKENROOT_ABI.get_function("walletCode")

    @staticmethod
    def root_owner() -> TokenRootRootOwnerFunction:
        return TOKENROOT_ABI.get_function("rootOwner")

    @staticmethod
    def wallet_of() -> TokenRootWalletOfFunction:
        return TOKENROOT_ABI.get_function("walletOf")

    @staticmethod
    def deploy_wallet() -> TokenRootDeployWalletFunction:
        return TOKENROOT_ABI.get_function("deployWallet")

    @staticmethod
    def mint() -> TokenRootMintFunction:
        return TOKENROOT_ABI.get_function("mint")

    @staticmethod
    def accept_burn() -> TokenRootAcceptBurnFunction:
        return TOKENROOT_ABI.get_function("acceptBurn")

    @staticmethod
    def send_surplus_gas() -> TokenRootSendSurplusGasFunction:
        return TOKENROOT_ABI.get_function("sendSurplusGas")
