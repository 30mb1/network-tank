"""
This file was auto generated by nekoton.
"""

from typing import Dict as _Dict, Optional as _Optional, List as _List, TypedDict as _TypedDict
from nekoton import (
    FunctionAbi as _FunctionAbi,
    FunctionAbiWithArgs as _FunctionAbiWithArgs,
    ContractAbi as _ContractAbi,
    Tokens as _Tokens,
    Address as _Address,
    Transaction as _Transaction,
    Cell as _Cell,
    FunctionCall as _FunctionCall,
)


DEXPAIR_ABI = _ContractAbi(
    r"""{"ABI version": 2, "version": "2.2", "header": ["pubkey", "time", "expire"], "functions": [{"name": "constructor", "inputs": [], "outputs": []}, {"name": "buildExchangePayload", "inputs": [{"name": "id", "type": "uint64"}, {"name": "deploy_wallet_grams", "type": "uint128"}, {"name": "expected_amount", "type": "uint128"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "buildExchangePayloadV2", "inputs": [{"name": "_id", "type": "uint64"}, {"name": "_deployWalletGrams", "type": "uint128"}, {"name": "_expectedAmount", "type": "uint128"}, {"name": "_recipient", "type": "address"}, {"name": "_referrer", "type": "address"}, {"name": "_successPayload", "type": "optional(cell)"}, {"name": "_cancelPayload", "type": "optional(cell)"}, {"name": "_toNative", "type": "optional(bool)"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "buildDepositLiquidityPayload", "inputs": [{"name": "id", "type": "uint64"}, {"name": "deploy_wallet_grams", "type": "uint128"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "buildDepositLiquidityPayloadV2", "inputs": [{"name": "_id", "type": "uint64"}, {"name": "_deployWalletGrams", "type": "uint128"}, {"name": "_expectedAmount", "type": "uint128"}, {"name": "_recipient", "type": "address"}, {"name": "_referrer", "type": "address"}, {"name": "_successPayload", "type": "optional(cell)"}, {"name": "_cancelPayload", "type": "optional(cell)"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "buildWithdrawLiquidityPayload", "inputs": [{"name": "id", "type": "uint64"}, {"name": "deploy_wallet_grams", "type": "uint128"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "buildWithdrawLiquidityPayloadV2", "inputs": [{"name": "_id", "type": "uint64"}, {"name": "_deployWalletGrams", "type": "uint128"}, {"name": "_expectedLeftAmount", "type": "uint128"}, {"name": "_expectedRightAmount", "type": "uint128"}, {"name": "_recipient", "type": "address"}, {"name": "_referrer", "type": "address"}, {"name": "_successPayload", "type": "optional(cell)"}, {"name": "_cancelPayload", "type": "optional(cell)"}, {"name": "_toNative", "type": "optional(bool)"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "buildCrossPairExchangePayload", "inputs": [{"name": "id", "type": "uint64"}, {"name": "deploy_wallet_grams", "type": "uint128"}, {"name": "expected_amount", "type": "uint128"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "steps", "type": "tuple[]"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "buildCrossPairExchangePayloadV2", "inputs": [{"name": "_id", "type": "uint64"}, {"name": "_deployWalletGrams", "type": "uint128"}, {"name": "_expectedAmount", "type": "uint128"}, {"name": "_outcoming", "type": "address"}, {"name": "_nextStepIndices", "type": "uint32[]"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "roots", "type": "address[]"}, {"name": "outcoming", "type": "address"}, {"name": "numerator", "type": "uint128"}, {"name": "nextStepIndices", "type": "uint32[]"}], "name": "_steps", "type": "tuple[]"}, {"name": "_recipient", "type": "address"}, {"name": "_referrer", "type": "address"}, {"name": "_successPayload", "type": "optional(cell)"}, {"name": "_cancelPayload", "type": "optional(cell)"}, {"name": "_toNative", "type": "optional(bool)"}], "outputs": [{"name": "value0", "type": "cell"}]}, {"name": "expectedDepositLiquidity", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "left_amount", "type": "uint128"}, {"name": "right_amount", "type": "uint128"}, {"name": "auto_change", "type": "bool"}, {"name": "referrer", "type": "optional(address)"}], "outputs": [{"components": [{"name": "step_1_left_deposit", "type": "uint128"}, {"name": "step_1_right_deposit", "type": "uint128"}, {"name": "step_1_lp_reward", "type": "uint128"}, {"name": "step_2_left_to_right", "type": "bool"}, {"name": "step_2_right_to_left", "type": "bool"}, {"name": "step_2_spent", "type": "uint128"}, {"name": "step_2_fee", "type": "uint128"}, {"name": "step_2_received", "type": "uint128"}, {"name": "step_3_left_deposit", "type": "uint128"}, {"name": "step_3_right_deposit", "type": "uint128"}, {"name": "step_3_lp_reward", "type": "uint128"}], "name": "value0", "type": "tuple"}]}, {"name": "depositLiquidity", "inputs": [{"name": "_callId", "type": "uint64"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "_operations", "type": "tuple[]"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "_expected", "type": "tuple"}, {"name": "_autoChange", "type": "bool"}, {"name": "_accountOwner", "type": "address"}, {"name": "value5", "type": "uint32"}, {"name": "_remainingGasTo", "type": "address"}, {"name": "_referrer", "type": "address"}], "outputs": []}, {"name": "expectedWithdrawLiquidity", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "lp_amount", "type": "uint128"}], "outputs": [{"name": "expected_left_amount", "type": "uint128"}, {"name": "expected_right_amount", "type": "uint128"}]}, {"name": "withdrawLiquidity", "inputs": [{"name": "_callId", "type": "uint64"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "_operation", "type": "tuple"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "_expected", "type": "tuple[]"}, {"name": "_accountOwner", "type": "address"}, {"name": "value4", "type": "uint32"}, {"name": "_remainingGasTo", "type": "address"}], "outputs": []}, {"name": "expectedExchange", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "amount", "type": "uint128"}, {"name": "spent_token_root", "type": "address"}], "outputs": [{"name": "expected_amount", "type": "uint128"}, {"name": "expected_fee", "type": "uint128"}]}, {"name": "expectedSpendAmount", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "receive_amount", "type": "uint128"}, {"name": "receive_token_root", "type": "address"}], "outputs": [{"name": "expected_amount", "type": "uint128"}, {"name": "expected_fee", "type": "uint128"}]}, {"name": "exchange", "inputs": [{"name": "_callId", "type": "uint64"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "_operation", "type": "tuple"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "_expected", "type": "tuple"}, {"name": "_accountOwner", "type": "address"}, {"name": "value4", "type": "uint32"}, {"name": "_remainingGasTo", "type": "address"}], "outputs": []}, {"name": "crossPoolExchange", "inputs": [{"name": "_id", "type": "uint64"}, {"name": "value1", "type": "uint32"}, {"name": "value2", "type": "uint8"}, {"name": "_prevPoolTokenRoots", "type": "address[]"}, {"name": "_op", "type": "uint8"}, {"name": "_spentTokenRoot", "type": "address"}, {"name": "_spentAmount", "type": "uint128"}, {"name": "_senderAddress", "type": "address"}, {"name": "_recipient", "type": "address"}, {"name": "_referrer", "type": "address"}, {"name": "_toNative", "type": "bool"}, {"name": "_remainingGasTo", "type": "address"}, {"name": "_deployWalletGrams", "type": "uint128"}, {"name": "_payload", "type": "cell"}, {"name": "_notifySuccess", "type": "bool"}, {"name": "_successPayload", "type": "cell"}, {"name": "_notifyCancel", "type": "bool"}, {"name": "_cancelPayload", "type": "cell"}], "outputs": []}, {"name": "onAcceptTokensTransfer", "inputs": [{"name": "_tokenRoot", "type": "address"}, {"name": "_tokensAmount", "type": "uint128"}, {"name": "_senderAddress", "type": "address"}, {"name": "_senderWallet", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}, {"name": "_payload", "type": "cell"}], "outputs": []}, {"name": "getRoot", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "dex_root", "type": "address"}]}, {"name": "getTokenRoots", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "left", "type": "address"}, {"name": "right", "type": "address"}, {"name": "lp", "type": "address"}]}, {"name": "getTokenWallets", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "left", "type": "address"}, {"name": "right", "type": "address"}, {"name": "lp", "type": "address"}]}, {"name": "getVersion", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "version", "type": "uint32"}]}, {"name": "getVault", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "address"}]}, {"name": "getPoolType", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "uint8"}]}, {"name": "getFeeParams", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"components": [{"name": "denominator", "type": "uint128"}, {"name": "pool_numerator", "type": "uint128"}, {"name": "beneficiary_numerator", "type": "uint128"}, {"name": "referrer_numerator", "type": "uint128"}, {"name": "beneficiary", "type": "address"}, {"name": "threshold", "type": "map(address,uint128)"}, {"name": "referrer_threshold", "type": "map(address,uint128)"}], "name": "value0", "type": "tuple"}]}, {"name": "getAccumulatedFees", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "accumulatedFees", "type": "uint128[]"}]}, {"name": "isActive", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"name": "value0", "type": "bool"}]}, {"name": "getBalances", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"components": [{"name": "lp_supply", "type": "uint128"}, {"name": "left_balance", "type": "uint128"}, {"name": "right_balance", "type": "uint128"}], "name": "value0", "type": "tuple"}]}, {"name": "setFeeParams", "inputs": [{"components": [{"name": "denominator", "type": "uint128"}, {"name": "pool_numerator", "type": "uint128"}, {"name": "beneficiary_numerator", "type": "uint128"}, {"name": "referrer_numerator", "type": "uint128"}, {"name": "beneficiary", "type": "address"}, {"name": "threshold", "type": "map(address,uint128)"}, {"name": "referrer_threshold", "type": "map(address,uint128)"}], "name": "_params", "type": "tuple"}, {"name": "_remainingGasTo", "type": "address"}], "outputs": []}, {"name": "withdrawBeneficiaryFee", "inputs": [{"name": "send_gas_to", "type": "address"}], "outputs": []}, {"name": "checkPair", "inputs": [{"name": "_accountOwner", "type": "address"}, {"name": "value1", "type": "uint32"}], "outputs": []}, {"name": "upgrade", "inputs": [{"name": "_code", "type": "cell"}, {"name": "_newVersion", "type": "uint32"}, {"name": "_newType", "type": "uint8"}, {"name": "_remainingGasTo", "type": "address"}], "outputs": []}, {"name": "liquidityTokenRootDeployed", "inputs": [{"name": "_lpRootAddress", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}], "outputs": []}, {"name": "liquidityTokenRootNotDeployed", "inputs": [{"name": "value0", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}], "outputs": []}, {"name": "onTokenWallet", "inputs": [{"name": "_wallet", "type": "address"}], "outputs": []}, {"name": "setActive", "inputs": [{"name": "_newActive", "type": "bool"}, {"name": "_remainingGasTo", "type": "address"}], "outputs": []}, {"name": "setOracleOptions", "inputs": [{"components": [{"name": "minInterval", "type": "uint8"}, {"name": "minRateDeltaNumerator", "type": "uint128"}, {"name": "minRateDeltaDenominator", "type": "uint128"}, {"name": "cardinality", "type": "uint16"}], "name": "_newOptions", "type": "tuple"}, {"name": "_remainingGasTo", "type": "address"}], "outputs": []}, {"name": "getOracleOptions", "inputs": [{"name": "answerId", "type": "uint32"}], "outputs": [{"components": [{"name": "minInterval", "type": "uint8"}, {"name": "minRateDeltaNumerator", "type": "uint128"}, {"name": "minRateDeltaDenominator", "type": "uint128"}, {"name": "cardinality", "type": "uint16"}], "name": "value0", "type": "tuple"}]}, {"name": "removeLastNPoints", "inputs": [{"name": "_count", "type": "uint16"}, {"name": "_remainingGasTo", "type": "address"}], "outputs": []}, {"name": "getObservation", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "_timestamp", "type": "uint32"}], "outputs": [{"components": [{"name": "timestamp", "type": "uint32"}, {"name": "price0To1Cumulative", "type": "uint256"}, {"name": "price1To0Cumulative", "type": "uint256"}], "name": "value0", "type": "optional(tuple)"}]}, {"name": "observation", "inputs": [{"name": "_timestamp", "type": "uint32"}, {"name": "_callbackTo", "type": "address"}, {"name": "_payload", "type": "cell"}], "outputs": []}, {"name": "getRate", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "_fromTimestamp", "type": "uint32"}, {"name": "_toTimestamp", "type": "uint32"}], "outputs": [{"components": [{"name": "price0To1", "type": "uint256"}, {"name": "price1To0", "type": "uint256"}, {"name": "fromTimestamp", "type": "uint32"}, {"name": "toTimestamp", "type": "uint32"}], "name": "value0", "type": "optional(tuple)"}, {"name": "value1", "type": "uint128[]"}]}, {"name": "rate", "inputs": [{"name": "_fromTimestamp", "type": "uint32"}, {"name": "_toTimestamp", "type": "uint32"}, {"name": "_callbackTo", "type": "address"}, {"name": "_payload", "type": "cell"}], "outputs": []}, {"name": "getExpectedAmountByTWAP", "inputs": [{"name": "answerId", "type": "uint32"}, {"name": "_amount", "type": "uint128"}, {"name": "_tokenRoot", "type": "address"}, {"name": "_fromTimestamp", "type": "uint32"}, {"name": "_toTimestamp", "type": "uint32"}], "outputs": [{"name": "value0", "type": "uint128"}]}, {"name": "platform_code", "inputs": [], "outputs": [{"name": "platform_code", "type": "cell"}]}], "data": [], "events": [{"name": "OracleInitialized", "inputs": [{"components": [{"name": "timestamp", "type": "uint32"}, {"name": "price0To1Cumulative", "type": "uint256"}, {"name": "price1To0Cumulative", "type": "uint256"}], "name": "value0", "type": "tuple"}], "outputs": []}, {"name": "OracleUpdated", "inputs": [{"components": [{"name": "timestamp", "type": "uint32"}, {"name": "price0To1Cumulative", "type": "uint256"}, {"name": "price1To0Cumulative", "type": "uint256"}], "name": "value0", "type": "tuple"}], "outputs": []}, {"name": "OracleOptionsUpdated", "inputs": [{"components": [{"name": "minInterval", "type": "uint8"}, {"name": "minRateDeltaNumerator", "type": "uint128"}, {"name": "minRateDeltaDenominator", "type": "uint128"}, {"name": "cardinality", "type": "uint16"}], "name": "value0", "type": "tuple"}], "outputs": []}, {"name": "PairCodeUpgraded", "inputs": [{"name": "version", "type": "uint32"}, {"name": "pool_type", "type": "uint8"}], "outputs": []}, {"name": "ActiveStatusUpdated", "inputs": [{"name": "current", "type": "bool"}, {"name": "previous", "type": "bool"}], "outputs": []}, {"name": "FeesParamsUpdated", "inputs": [{"components": [{"name": "denominator", "type": "uint128"}, {"name": "pool_numerator", "type": "uint128"}, {"name": "beneficiary_numerator", "type": "uint128"}, {"name": "referrer_numerator", "type": "uint128"}, {"name": "beneficiary", "type": "address"}, {"name": "threshold", "type": "map(address,uint128)"}, {"name": "referrer_threshold", "type": "map(address,uint128)"}], "name": "params", "type": "tuple"}], "outputs": []}, {"name": "DepositLiquidity", "inputs": [{"name": "sender", "type": "address"}, {"name": "owner", "type": "address"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "tokens", "type": "tuple[]"}, {"name": "lp", "type": "uint128"}], "outputs": []}, {"name": "WithdrawLiquidity", "inputs": [{"name": "sender", "type": "address"}, {"name": "owner", "type": "address"}, {"name": "lp", "type": "uint128"}, {"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "tokens", "type": "tuple[]"}], "outputs": []}, {"name": "Exchange", "inputs": [{"name": "sender", "type": "address"}, {"name": "recipient", "type": "address"}, {"name": "spentTokenRoot", "type": "address"}, {"name": "spentAmount", "type": "uint128"}, {"name": "receiveTokenRoot", "type": "address"}, {"name": "receiveAmount", "type": "uint128"}, {"components": [{"name": "feeTokenRoot", "type": "address"}, {"name": "pool_fee", "type": "uint128"}, {"name": "beneficiary_fee", "type": "uint128"}, {"name": "beneficiary", "type": "address"}], "name": "fees", "type": "tuple[]"}], "outputs": []}, {"name": "ReferrerFees", "inputs": [{"components": [{"name": "amount", "type": "uint128"}, {"name": "root", "type": "address"}], "name": "fees", "type": "tuple[]"}], "outputs": []}, {"name": "Sync", "inputs": [{"name": "reserves", "type": "uint128[]"}, {"name": "lp_supply", "type": "uint128"}], "outputs": []}], "fields": [{"name": "_pubkey", "type": "uint256"}, {"name": "_timestamp", "type": "uint64"}, {"name": "_constructorFlag", "type": "bool"}, {"name": "platform_code", "type": "cell"}, {"components": [{"name": "price0To1Cumulative", "type": "uint256"}, {"name": "price1To0Cumulative", "type": "uint256"}], "name": "_points", "type": "map(uint32,tuple)"}, {"name": "_length", "type": "uint16"}, {"components": [{"name": "minInterval", "type": "uint8"}, {"name": "minRateDeltaNumerator", "type": "uint128"}, {"name": "minRateDeltaDenominator", "type": "uint128"}, {"name": "cardinality", "type": "uint16"}], "name": "_options", "type": "tuple"}, {"name": "_root", "type": "address"}, {"name": "_vault", "type": "address"}, {"name": "_active", "type": "bool"}, {"name": "_currentVersion", "type": "uint32"}, {"components": [{"name": "denominator", "type": "uint128"}, {"name": "pool_numerator", "type": "uint128"}, {"name": "beneficiary_numerator", "type": "uint128"}, {"name": "referrer_numerator", "type": "uint128"}, {"name": "beneficiary", "type": "address"}, {"name": "threshold", "type": "map(address,uint128)"}, {"name": "referrer_threshold", "type": "map(address,uint128)"}], "name": "_fee", "type": "tuple"}, {"name": "_typeToRootAddresses", "type": "map(uint8,address[])"}, {"name": "_typeToWalletAddresses", "type": "map(uint8,address[])"}, {"name": "_typeToReserves", "type": "map(uint8,uint128[])"}]}"""
)


class ConstructorInput(_TypedDict):
    pass


class ConstructorOutput(_TypedDict):
    pass


class DexPairConstructorFunctionCall(_FunctionCall):
    @property
    def input(self) -> ConstructorInput:
        return _FunctionCall.input

    @property
    def output(self) -> ConstructorOutput:
        return _FunctionCall.output


class BuildExchangePayloadInput(_TypedDict):
    id: int | _Tokens
    deploy_wallet_grams: int | _Tokens
    expected_amount: int | _Tokens


class BuildExchangePayloadOutput(_TypedDict):
    value0: _Cell


class DexPairBuildExchangePayloadFunctionCall(_FunctionCall):
    @property
    def input(self) -> BuildExchangePayloadInput:
        return _FunctionCall.input

    @property
    def output(self) -> BuildExchangePayloadOutput:
        return _FunctionCall.output


class BuildExchangePayloadV2Input(_TypedDict):
    _id: int | _Tokens
    _deployWalletGrams: int | _Tokens
    _expectedAmount: int | _Tokens
    _recipient: _Address
    _referrer: _Address
    _successPayload: _Optional[_Cell]
    _cancelPayload: _Optional[_Cell]
    _toNative: _Optional[bool]


class BuildExchangePayloadV2Output(_TypedDict):
    value0: _Cell


class DexPairBuildExchangePayloadV2FunctionCall(_FunctionCall):
    @property
    def input(self) -> BuildExchangePayloadV2Input:
        return _FunctionCall.input

    @property
    def output(self) -> BuildExchangePayloadV2Output:
        return _FunctionCall.output


class BuildDepositLiquidityPayloadInput(_TypedDict):
    id: int | _Tokens
    deploy_wallet_grams: int | _Tokens


class BuildDepositLiquidityPayloadOutput(_TypedDict):
    value0: _Cell


class DexPairBuildDepositLiquidityPayloadFunctionCall(_FunctionCall):
    @property
    def input(self) -> BuildDepositLiquidityPayloadInput:
        return _FunctionCall.input

    @property
    def output(self) -> BuildDepositLiquidityPayloadOutput:
        return _FunctionCall.output


class BuildDepositLiquidityPayloadV2Input(_TypedDict):
    _id: int | _Tokens
    _deployWalletGrams: int | _Tokens
    _expectedAmount: int | _Tokens
    _recipient: _Address
    _referrer: _Address
    _successPayload: _Optional[_Cell]
    _cancelPayload: _Optional[_Cell]


class BuildDepositLiquidityPayloadV2Output(_TypedDict):
    value0: _Cell


class DexPairBuildDepositLiquidityPayloadV2FunctionCall(_FunctionCall):
    @property
    def input(self) -> BuildDepositLiquidityPayloadV2Input:
        return _FunctionCall.input

    @property
    def output(self) -> BuildDepositLiquidityPayloadV2Output:
        return _FunctionCall.output


class BuildWithdrawLiquidityPayloadInput(_TypedDict):
    id: int | _Tokens
    deploy_wallet_grams: int | _Tokens


class BuildWithdrawLiquidityPayloadOutput(_TypedDict):
    value0: _Cell


class DexPairBuildWithdrawLiquidityPayloadFunctionCall(_FunctionCall):
    @property
    def input(self) -> BuildWithdrawLiquidityPayloadInput:
        return _FunctionCall.input

    @property
    def output(self) -> BuildWithdrawLiquidityPayloadOutput:
        return _FunctionCall.output


class BuildWithdrawLiquidityPayloadV2Input(_TypedDict):
    _id: int | _Tokens
    _deployWalletGrams: int | _Tokens
    _expectedLeftAmount: int | _Tokens
    _expectedRightAmount: int | _Tokens
    _recipient: _Address
    _referrer: _Address
    _successPayload: _Optional[_Cell]
    _cancelPayload: _Optional[_Cell]
    _toNative: _Optional[bool]


class BuildWithdrawLiquidityPayloadV2Output(_TypedDict):
    value0: _Cell


class DexPairBuildWithdrawLiquidityPayloadV2FunctionCall(_FunctionCall):
    @property
    def input(self) -> BuildWithdrawLiquidityPayloadV2Input:
        return _FunctionCall.input

    @property
    def output(self) -> BuildWithdrawLiquidityPayloadV2Output:
        return _FunctionCall.output


class InternalStruct0(_TypedDict):
    amount: int | _Tokens
    root: _Address


class BuildCrossPairExchangePayloadInput(_TypedDict):
    id: int | _Tokens
    deploy_wallet_grams: int | _Tokens
    expected_amount: int | _Tokens
    steps: _List[InternalStruct0]


class BuildCrossPairExchangePayloadOutput(_TypedDict):
    value0: _Cell


class DexPairBuildCrossPairExchangePayloadFunctionCall(_FunctionCall):
    @property
    def input(self) -> BuildCrossPairExchangePayloadInput:
        return _FunctionCall.input

    @property
    def output(self) -> BuildCrossPairExchangePayloadOutput:
        return _FunctionCall.output


class InternalStruct1(_TypedDict):
    amount: int | _Tokens
    roots: _List[_Address]
    outcoming: _Address
    numerator: int | _Tokens
    nextStepIndices: _List[int | _Tokens]


class BuildCrossPairExchangePayloadV2Input(_TypedDict):
    _id: int | _Tokens
    _deployWalletGrams: int | _Tokens
    _expectedAmount: int | _Tokens
    _outcoming: _Address
    _nextStepIndices: _List[int | _Tokens]
    _steps: _List[InternalStruct1]
    _recipient: _Address
    _referrer: _Address
    _successPayload: _Optional[_Cell]
    _cancelPayload: _Optional[_Cell]
    _toNative: _Optional[bool]


class BuildCrossPairExchangePayloadV2Output(_TypedDict):
    value0: _Cell


class DexPairBuildCrossPairExchangePayloadV2FunctionCall(_FunctionCall):
    @property
    def input(self) -> BuildCrossPairExchangePayloadV2Input:
        return _FunctionCall.input

    @property
    def output(self) -> BuildCrossPairExchangePayloadV2Output:
        return _FunctionCall.output


class ExpectedDepositLiquidityInput(_TypedDict):
    answerId: int | _Tokens
    left_amount: int | _Tokens
    right_amount: int | _Tokens
    auto_change: bool
    referrer: _Optional[_Address]


class InternalStruct2(_TypedDict):
    step_1_left_deposit: int | _Tokens
    step_1_right_deposit: int | _Tokens
    step_1_lp_reward: int | _Tokens
    step_2_left_to_right: bool
    step_2_right_to_left: bool
    step_2_spent: int | _Tokens
    step_2_fee: int | _Tokens
    step_2_received: int | _Tokens
    step_3_left_deposit: int | _Tokens
    step_3_right_deposit: int | _Tokens
    step_3_lp_reward: int | _Tokens


class ExpectedDepositLiquidityOutput(_TypedDict):
    value0: InternalStruct2


class DexPairExpectedDepositLiquidityFunctionCall(_FunctionCall):
    @property
    def input(self) -> ExpectedDepositLiquidityInput:
        return _FunctionCall.input

    @property
    def output(self) -> ExpectedDepositLiquidityOutput:
        return _FunctionCall.output


class DepositLiquidityInput(_TypedDict):
    _callId: int | _Tokens
    _operations: _List[InternalStruct0]
    _expected: InternalStruct0
    _autoChange: bool
    _accountOwner: _Address
    value5: int | _Tokens
    _remainingGasTo: _Address
    _referrer: _Address


class DepositLiquidityOutput(_TypedDict):
    pass


class DexPairDepositLiquidityFunctionCall(_FunctionCall):
    @property
    def input(self) -> DepositLiquidityInput:
        return _FunctionCall.input

    @property
    def output(self) -> DepositLiquidityOutput:
        return _FunctionCall.output


class ExpectedWithdrawLiquidityInput(_TypedDict):
    answerId: int | _Tokens
    lp_amount: int | _Tokens


class ExpectedWithdrawLiquidityOutput(_TypedDict):
    expected_left_amount: int | _Tokens
    expected_right_amount: int | _Tokens


class DexPairExpectedWithdrawLiquidityFunctionCall(_FunctionCall):
    @property
    def input(self) -> ExpectedWithdrawLiquidityInput:
        return _FunctionCall.input

    @property
    def output(self) -> ExpectedWithdrawLiquidityOutput:
        return _FunctionCall.output


class WithdrawLiquidityInput(_TypedDict):
    _callId: int | _Tokens
    _operation: InternalStruct0
    _expected: _List[InternalStruct0]
    _accountOwner: _Address
    value4: int | _Tokens
    _remainingGasTo: _Address


class WithdrawLiquidityOutput(_TypedDict):
    pass


class DexPairWithdrawLiquidityFunctionCall(_FunctionCall):
    @property
    def input(self) -> WithdrawLiquidityInput:
        return _FunctionCall.input

    @property
    def output(self) -> WithdrawLiquidityOutput:
        return _FunctionCall.output


class ExpectedExchangeInput(_TypedDict):
    answerId: int | _Tokens
    amount: int | _Tokens
    spent_token_root: _Address


class ExpectedExchangeOutput(_TypedDict):
    expected_amount: int | _Tokens
    expected_fee: int | _Tokens


class DexPairExpectedExchangeFunctionCall(_FunctionCall):
    @property
    def input(self) -> ExpectedExchangeInput:
        return _FunctionCall.input

    @property
    def output(self) -> ExpectedExchangeOutput:
        return _FunctionCall.output


class ExpectedSpendAmountInput(_TypedDict):
    answerId: int | _Tokens
    receive_amount: int | _Tokens
    receive_token_root: _Address


class ExpectedSpendAmountOutput(_TypedDict):
    expected_amount: int | _Tokens
    expected_fee: int | _Tokens


class DexPairExpectedSpendAmountFunctionCall(_FunctionCall):
    @property
    def input(self) -> ExpectedSpendAmountInput:
        return _FunctionCall.input

    @property
    def output(self) -> ExpectedSpendAmountOutput:
        return _FunctionCall.output


class ExchangeInput(_TypedDict):
    _callId: int | _Tokens
    _operation: InternalStruct0
    _expected: InternalStruct0
    _accountOwner: _Address
    value4: int | _Tokens
    _remainingGasTo: _Address


class ExchangeOutput(_TypedDict):
    pass


class DexPairExchangeFunctionCall(_FunctionCall):
    @property
    def input(self) -> ExchangeInput:
        return _FunctionCall.input

    @property
    def output(self) -> ExchangeOutput:
        return _FunctionCall.output


class CrossPoolExchangeInput(_TypedDict):
    _id: int | _Tokens
    value1: int | _Tokens
    value2: int | _Tokens
    _prevPoolTokenRoots: _List[_Address]
    _op: int | _Tokens
    _spentTokenRoot: _Address
    _spentAmount: int | _Tokens
    _senderAddress: _Address
    _recipient: _Address
    _referrer: _Address
    _toNative: bool
    _remainingGasTo: _Address
    _deployWalletGrams: int | _Tokens
    _payload: _Cell
    _notifySuccess: bool
    _successPayload: _Cell
    _notifyCancel: bool
    _cancelPayload: _Cell


class CrossPoolExchangeOutput(_TypedDict):
    pass


class DexPairCrossPoolExchangeFunctionCall(_FunctionCall):
    @property
    def input(self) -> CrossPoolExchangeInput:
        return _FunctionCall.input

    @property
    def output(self) -> CrossPoolExchangeOutput:
        return _FunctionCall.output


class OnAcceptTokensTransferInput(_TypedDict):
    _tokenRoot: _Address
    _tokensAmount: int | _Tokens
    _senderAddress: _Address
    _senderWallet: _Address
    _remainingGasTo: _Address
    _payload: _Cell


class OnAcceptTokensTransferOutput(_TypedDict):
    pass


class DexPairOnAcceptTokensTransferFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnAcceptTokensTransferInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnAcceptTokensTransferOutput:
        return _FunctionCall.output


class GetRootInput(_TypedDict):
    answerId: int | _Tokens


class GetRootOutput(_TypedDict):
    dex_root: _Address


class DexPairGetRootFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetRootInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetRootOutput:
        return _FunctionCall.output


class GetTokenRootsInput(_TypedDict):
    answerId: int | _Tokens


class GetTokenRootsOutput(_TypedDict):
    left: _Address
    right: _Address
    lp: _Address


class DexPairGetTokenRootsFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetTokenRootsInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetTokenRootsOutput:
        return _FunctionCall.output


class GetTokenWalletsInput(_TypedDict):
    answerId: int | _Tokens


class GetTokenWalletsOutput(_TypedDict):
    left: _Address
    right: _Address
    lp: _Address


class DexPairGetTokenWalletsFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetTokenWalletsInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetTokenWalletsOutput:
        return _FunctionCall.output


class GetVersionInput(_TypedDict):
    answerId: int | _Tokens


class GetVersionOutput(_TypedDict):
    version: int | _Tokens


class DexPairGetVersionFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetVersionInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetVersionOutput:
        return _FunctionCall.output


class GetVaultInput(_TypedDict):
    answerId: int | _Tokens


class GetVaultOutput(_TypedDict):
    value0: _Address


class DexPairGetVaultFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetVaultInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetVaultOutput:
        return _FunctionCall.output


class GetPoolTypeInput(_TypedDict):
    answerId: int | _Tokens


class GetPoolTypeOutput(_TypedDict):
    value0: int | _Tokens


class DexPairGetPoolTypeFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetPoolTypeInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetPoolTypeOutput:
        return _FunctionCall.output


class GetFeeParamsInput(_TypedDict):
    answerId: int | _Tokens


class InternalStruct3(_TypedDict):
    denominator: int | _Tokens
    pool_numerator: int | _Tokens
    beneficiary_numerator: int | _Tokens
    referrer_numerator: int | _Tokens
    beneficiary: _Address
    threshold: _Dict[_Address, int | _Tokens]
    referrer_threshold: _Dict[_Address, int | _Tokens]


class GetFeeParamsOutput(_TypedDict):
    value0: InternalStruct3


class DexPairGetFeeParamsFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetFeeParamsInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetFeeParamsOutput:
        return _FunctionCall.output


class GetAccumulatedFeesInput(_TypedDict):
    answerId: int | _Tokens


class GetAccumulatedFeesOutput(_TypedDict):
    accumulatedFees: _List[int | _Tokens]


class DexPairGetAccumulatedFeesFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetAccumulatedFeesInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetAccumulatedFeesOutput:
        return _FunctionCall.output


class IsActiveInput(_TypedDict):
    answerId: int | _Tokens


class IsActiveOutput(_TypedDict):
    value0: bool


class DexPairIsActiveFunctionCall(_FunctionCall):
    @property
    def input(self) -> IsActiveInput:
        return _FunctionCall.input

    @property
    def output(self) -> IsActiveOutput:
        return _FunctionCall.output


class GetBalancesInput(_TypedDict):
    answerId: int | _Tokens


class InternalStruct4(_TypedDict):
    lp_supply: int | _Tokens
    left_balance: int | _Tokens
    right_balance: int | _Tokens


class GetBalancesOutput(_TypedDict):
    value0: InternalStruct4


class DexPairGetBalancesFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetBalancesInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetBalancesOutput:
        return _FunctionCall.output


class SetFeeParamsInput(_TypedDict):
    _params: InternalStruct3
    _remainingGasTo: _Address


class SetFeeParamsOutput(_TypedDict):
    pass


class DexPairSetFeeParamsFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetFeeParamsInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetFeeParamsOutput:
        return _FunctionCall.output


class WithdrawBeneficiaryFeeInput(_TypedDict):
    send_gas_to: _Address


class WithdrawBeneficiaryFeeOutput(_TypedDict):
    pass


class DexPairWithdrawBeneficiaryFeeFunctionCall(_FunctionCall):
    @property
    def input(self) -> WithdrawBeneficiaryFeeInput:
        return _FunctionCall.input

    @property
    def output(self) -> WithdrawBeneficiaryFeeOutput:
        return _FunctionCall.output


class CheckPairInput(_TypedDict):
    _accountOwner: _Address
    value1: int | _Tokens


class CheckPairOutput(_TypedDict):
    pass


class DexPairCheckPairFunctionCall(_FunctionCall):
    @property
    def input(self) -> CheckPairInput:
        return _FunctionCall.input

    @property
    def output(self) -> CheckPairOutput:
        return _FunctionCall.output


class UpgradeInput(_TypedDict):
    _code: _Cell
    _newVersion: int | _Tokens
    _newType: int | _Tokens
    _remainingGasTo: _Address


class UpgradeOutput(_TypedDict):
    pass


class DexPairUpgradeFunctionCall(_FunctionCall):
    @property
    def input(self) -> UpgradeInput:
        return _FunctionCall.input

    @property
    def output(self) -> UpgradeOutput:
        return _FunctionCall.output


class LiquidityTokenRootDeployedInput(_TypedDict):
    _lpRootAddress: _Address
    _remainingGasTo: _Address


class LiquidityTokenRootDeployedOutput(_TypedDict):
    pass


class DexPairLiquidityTokenRootDeployedFunctionCall(_FunctionCall):
    @property
    def input(self) -> LiquidityTokenRootDeployedInput:
        return _FunctionCall.input

    @property
    def output(self) -> LiquidityTokenRootDeployedOutput:
        return _FunctionCall.output


class LiquidityTokenRootNotDeployedInput(_TypedDict):
    value0: _Address
    _remainingGasTo: _Address


class LiquidityTokenRootNotDeployedOutput(_TypedDict):
    pass


class DexPairLiquidityTokenRootNotDeployedFunctionCall(_FunctionCall):
    @property
    def input(self) -> LiquidityTokenRootNotDeployedInput:
        return _FunctionCall.input

    @property
    def output(self) -> LiquidityTokenRootNotDeployedOutput:
        return _FunctionCall.output


class OnTokenWalletInput(_TypedDict):
    _wallet: _Address


class OnTokenWalletOutput(_TypedDict):
    pass


class DexPairOnTokenWalletFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnTokenWalletInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnTokenWalletOutput:
        return _FunctionCall.output


class SetActiveInput(_TypedDict):
    _newActive: bool
    _remainingGasTo: _Address


class SetActiveOutput(_TypedDict):
    pass


class DexPairSetActiveFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetActiveInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetActiveOutput:
        return _FunctionCall.output


class InternalStruct5(_TypedDict):
    minInterval: int | _Tokens
    minRateDeltaNumerator: int | _Tokens
    minRateDeltaDenominator: int | _Tokens
    cardinality: int | _Tokens


class SetOracleOptionsInput(_TypedDict):
    _newOptions: InternalStruct5
    _remainingGasTo: _Address


class SetOracleOptionsOutput(_TypedDict):
    pass


class DexPairSetOracleOptionsFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetOracleOptionsInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetOracleOptionsOutput:
        return _FunctionCall.output


class GetOracleOptionsInput(_TypedDict):
    answerId: int | _Tokens


class GetOracleOptionsOutput(_TypedDict):
    value0: InternalStruct5


class DexPairGetOracleOptionsFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetOracleOptionsInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetOracleOptionsOutput:
        return _FunctionCall.output


class RemoveLastNPointsInput(_TypedDict):
    _count: int | _Tokens
    _remainingGasTo: _Address


class RemoveLastNPointsOutput(_TypedDict):
    pass


class DexPairRemoveLastNPointsFunctionCall(_FunctionCall):
    @property
    def input(self) -> RemoveLastNPointsInput:
        return _FunctionCall.input

    @property
    def output(self) -> RemoveLastNPointsOutput:
        return _FunctionCall.output


class GetObservationInput(_TypedDict):
    answerId: int | _Tokens
    _timestamp: int | _Tokens


class InternalStruct6(_TypedDict):
    timestamp: int | _Tokens
    price0To1Cumulative: int | _Tokens
    price1To0Cumulative: int | _Tokens


class GetObservationOutput(_TypedDict):
    value0: _Optional[InternalStruct6]


class DexPairGetObservationFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetObservationInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetObservationOutput:
        return _FunctionCall.output


class ObservationInput(_TypedDict):
    _timestamp: int | _Tokens
    _callbackTo: _Address
    _payload: _Cell


class ObservationOutput(_TypedDict):
    pass


class DexPairObservationFunctionCall(_FunctionCall):
    @property
    def input(self) -> ObservationInput:
        return _FunctionCall.input

    @property
    def output(self) -> ObservationOutput:
        return _FunctionCall.output


class GetRateInput(_TypedDict):
    answerId: int | _Tokens
    _fromTimestamp: int | _Tokens
    _toTimestamp: int | _Tokens


class InternalStruct7(_TypedDict):
    price0To1: int | _Tokens
    price1To0: int | _Tokens
    fromTimestamp: int | _Tokens
    toTimestamp: int | _Tokens


class GetRateOutput(_TypedDict):
    value0: _Optional[InternalStruct7]
    value1: _List[int | _Tokens]


class DexPairGetRateFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetRateInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetRateOutput:
        return _FunctionCall.output


class RateInput(_TypedDict):
    _fromTimestamp: int | _Tokens
    _toTimestamp: int | _Tokens
    _callbackTo: _Address
    _payload: _Cell


class RateOutput(_TypedDict):
    pass


class DexPairRateFunctionCall(_FunctionCall):
    @property
    def input(self) -> RateInput:
        return _FunctionCall.input

    @property
    def output(self) -> RateOutput:
        return _FunctionCall.output


class GetExpectedAmountByTWAPInput(_TypedDict):
    answerId: int | _Tokens
    _amount: int | _Tokens
    _tokenRoot: _Address
    _fromTimestamp: int | _Tokens
    _toTimestamp: int | _Tokens


class GetExpectedAmountByTWAPOutput(_TypedDict):
    value0: int | _Tokens


class DexPairGetExpectedAmountByTWAPFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetExpectedAmountByTWAPInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetExpectedAmountByTWAPOutput:
        return _FunctionCall.output


class PlatformCodeInput(_TypedDict):
    pass


class PlatformCodeOutput(_TypedDict):
    platform_code: _Cell


class DexPairPlatformCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> PlatformCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> PlatformCodeOutput:
        return _FunctionCall.output


class DexPairConstructorFunction(_FunctionAbi):
    def with_args(self, args: ConstructorInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ConstructorInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ConstructorOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairConstructorFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairBuildExchangePayloadFunction(_FunctionAbi):
    def with_args(self, args: BuildExchangePayloadInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BuildExchangePayloadInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> BuildExchangePayloadOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairBuildExchangePayloadFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairBuildExchangePayloadV2Function(_FunctionAbi):
    def with_args(self, args: BuildExchangePayloadV2Input) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BuildExchangePayloadV2Input:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> BuildExchangePayloadV2Output:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairBuildExchangePayloadV2FunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairBuildDepositLiquidityPayloadFunction(_FunctionAbi):
    def with_args(self, args: BuildDepositLiquidityPayloadInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BuildDepositLiquidityPayloadInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> BuildDepositLiquidityPayloadOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairBuildDepositLiquidityPayloadFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairBuildDepositLiquidityPayloadV2Function(_FunctionAbi):
    def with_args(self, args: BuildDepositLiquidityPayloadV2Input) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BuildDepositLiquidityPayloadV2Input:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> BuildDepositLiquidityPayloadV2Output:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairBuildDepositLiquidityPayloadV2FunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairBuildWithdrawLiquidityPayloadFunction(_FunctionAbi):
    def with_args(self, args: BuildWithdrawLiquidityPayloadInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BuildWithdrawLiquidityPayloadInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> BuildWithdrawLiquidityPayloadOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairBuildWithdrawLiquidityPayloadFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairBuildWithdrawLiquidityPayloadV2Function(_FunctionAbi):
    def with_args(self, args: BuildWithdrawLiquidityPayloadV2Input) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BuildWithdrawLiquidityPayloadV2Input:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> BuildWithdrawLiquidityPayloadV2Output:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairBuildWithdrawLiquidityPayloadV2FunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairBuildCrossPairExchangePayloadFunction(_FunctionAbi):
    def with_args(self, args: BuildCrossPairExchangePayloadInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BuildCrossPairExchangePayloadInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> BuildCrossPairExchangePayloadOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairBuildCrossPairExchangePayloadFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairBuildCrossPairExchangePayloadV2Function(_FunctionAbi):
    def with_args(self, args: BuildCrossPairExchangePayloadV2Input) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> BuildCrossPairExchangePayloadV2Input:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> BuildCrossPairExchangePayloadV2Output:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairBuildCrossPairExchangePayloadV2FunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairExpectedDepositLiquidityFunction(_FunctionAbi):
    def with_args(self, args: ExpectedDepositLiquidityInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ExpectedDepositLiquidityInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> ExpectedDepositLiquidityOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairExpectedDepositLiquidityFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairDepositLiquidityFunction(_FunctionAbi):
    def with_args(self, args: DepositLiquidityInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> DepositLiquidityInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DepositLiquidityOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairDepositLiquidityFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairExpectedWithdrawLiquidityFunction(_FunctionAbi):
    def with_args(self, args: ExpectedWithdrawLiquidityInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ExpectedWithdrawLiquidityInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> ExpectedWithdrawLiquidityOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairExpectedWithdrawLiquidityFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairWithdrawLiquidityFunction(_FunctionAbi):
    def with_args(self, args: WithdrawLiquidityInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> WithdrawLiquidityInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> WithdrawLiquidityOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairWithdrawLiquidityFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairExpectedExchangeFunction(_FunctionAbi):
    def with_args(self, args: ExpectedExchangeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ExpectedExchangeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ExpectedExchangeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairExpectedExchangeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairExpectedSpendAmountFunction(_FunctionAbi):
    def with_args(self, args: ExpectedSpendAmountInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ExpectedSpendAmountInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ExpectedSpendAmountOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairExpectedSpendAmountFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairExchangeFunction(_FunctionAbi):
    def with_args(self, args: ExchangeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> ExchangeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ExchangeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairExchangeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairCrossPoolExchangeFunction(_FunctionAbi):
    def with_args(self, args: CrossPoolExchangeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> CrossPoolExchangeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> CrossPoolExchangeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairCrossPoolExchangeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairOnAcceptTokensTransferFunction(_FunctionAbi):
    def with_args(self, args: OnAcceptTokensTransferInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> OnAcceptTokensTransferInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> OnAcceptTokensTransferOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairOnAcceptTokensTransferFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetRootFunction(_FunctionAbi):
    def with_args(self, args: GetRootInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetRootInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetRootOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetRootFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetTokenRootsFunction(_FunctionAbi):
    def with_args(self, args: GetTokenRootsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetTokenRootsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetTokenRootsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetTokenRootsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetTokenWalletsFunction(_FunctionAbi):
    def with_args(self, args: GetTokenWalletsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetTokenWalletsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetTokenWalletsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetTokenWalletsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetVersionFunction(_FunctionAbi):
    def with_args(self, args: GetVersionInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetVersionInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetVersionOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetVersionFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetVaultFunction(_FunctionAbi):
    def with_args(self, args: GetVaultInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetVaultInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetVaultOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetVaultFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetPoolTypeFunction(_FunctionAbi):
    def with_args(self, args: GetPoolTypeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetPoolTypeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetPoolTypeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetPoolTypeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetFeeParamsFunction(_FunctionAbi):
    def with_args(self, args: GetFeeParamsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetFeeParamsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetFeeParamsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetFeeParamsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetAccumulatedFeesFunction(_FunctionAbi):
    def with_args(self, args: GetAccumulatedFeesInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetAccumulatedFeesInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetAccumulatedFeesOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetAccumulatedFeesFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairIsActiveFunction(_FunctionAbi):
    def with_args(self, args: IsActiveInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> IsActiveInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> IsActiveOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairIsActiveFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetBalancesFunction(_FunctionAbi):
    def with_args(self, args: GetBalancesInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetBalancesInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetBalancesOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetBalancesFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairSetFeeParamsFunction(_FunctionAbi):
    def with_args(self, args: SetFeeParamsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetFeeParamsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetFeeParamsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairSetFeeParamsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairWithdrawBeneficiaryFeeFunction(_FunctionAbi):
    def with_args(self, args: WithdrawBeneficiaryFeeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> WithdrawBeneficiaryFeeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> WithdrawBeneficiaryFeeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairWithdrawBeneficiaryFeeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairCheckPairFunction(_FunctionAbi):
    def with_args(self, args: CheckPairInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> CheckPairInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> CheckPairOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairCheckPairFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairUpgradeFunction(_FunctionAbi):
    def with_args(self, args: UpgradeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> UpgradeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> UpgradeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairUpgradeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairLiquidityTokenRootDeployedFunction(_FunctionAbi):
    def with_args(self, args: LiquidityTokenRootDeployedInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> LiquidityTokenRootDeployedInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> LiquidityTokenRootDeployedOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairLiquidityTokenRootDeployedFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairLiquidityTokenRootNotDeployedFunction(_FunctionAbi):
    def with_args(self, args: LiquidityTokenRootNotDeployedInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> LiquidityTokenRootNotDeployedInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> LiquidityTokenRootNotDeployedOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairLiquidityTokenRootNotDeployedFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairOnTokenWalletFunction(_FunctionAbi):
    def with_args(self, args: OnTokenWalletInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> OnTokenWalletInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> OnTokenWalletOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairOnTokenWalletFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairSetActiveFunction(_FunctionAbi):
    def with_args(self, args: SetActiveInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetActiveInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetActiveOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairSetActiveFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairSetOracleOptionsFunction(_FunctionAbi):
    def with_args(self, args: SetOracleOptionsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetOracleOptionsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetOracleOptionsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairSetOracleOptionsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetOracleOptionsFunction(_FunctionAbi):
    def with_args(self, args: GetOracleOptionsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetOracleOptionsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetOracleOptionsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetOracleOptionsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairRemoveLastNPointsFunction(_FunctionAbi):
    def with_args(self, args: RemoveLastNPointsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> RemoveLastNPointsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> RemoveLastNPointsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairRemoveLastNPointsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetObservationFunction(_FunctionAbi):
    def with_args(self, args: GetObservationInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetObservationInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetObservationOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetObservationFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairObservationFunction(_FunctionAbi):
    def with_args(self, args: ObservationInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ObservationInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ObservationOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairObservationFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetRateFunction(_FunctionAbi):
    def with_args(self, args: GetRateInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetRateInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetRateOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetRateFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairRateFunction(_FunctionAbi):
    def with_args(self, args: RateInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> RateInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> RateOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairRateFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairGetExpectedAmountByTWAPFunction(_FunctionAbi):
    def with_args(self, args: GetExpectedAmountByTWAPInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetExpectedAmountByTWAPInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> GetExpectedAmountByTWAPOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairGetExpectedAmountByTWAPFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairPlatformCodeFunction(_FunctionAbi):
    def with_args(self, args: PlatformCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> PlatformCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> PlatformCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexPairPlatformCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexPairAbi:
    @staticmethod
    def constructor() -> DexPairConstructorFunction:
        return DEXPAIR_ABI.get_function("constructor")

    @staticmethod
    def build_exchange_payload() -> DexPairBuildExchangePayloadFunction:
        return DEXPAIR_ABI.get_function("buildExchangePayload")

    @staticmethod
    def build_exchange_payload_v2() -> DexPairBuildExchangePayloadV2Function:
        return DEXPAIR_ABI.get_function("buildExchangePayloadV2")

    @staticmethod
    def build_deposit_liquidity_payload() -> DexPairBuildDepositLiquidityPayloadFunction:
        return DEXPAIR_ABI.get_function("buildDepositLiquidityPayload")

    @staticmethod
    def build_deposit_liquidity_payload_v2() -> DexPairBuildDepositLiquidityPayloadV2Function:
        return DEXPAIR_ABI.get_function("buildDepositLiquidityPayloadV2")

    @staticmethod
    def build_withdraw_liquidity_payload() -> DexPairBuildWithdrawLiquidityPayloadFunction:
        return DEXPAIR_ABI.get_function("buildWithdrawLiquidityPayload")

    @staticmethod
    def build_withdraw_liquidity_payload_v2() -> DexPairBuildWithdrawLiquidityPayloadV2Function:
        return DEXPAIR_ABI.get_function("buildWithdrawLiquidityPayloadV2")

    @staticmethod
    def build_cross_pair_exchange_payload() -> DexPairBuildCrossPairExchangePayloadFunction:
        return DEXPAIR_ABI.get_function("buildCrossPairExchangePayload")

    @staticmethod
    def build_cross_pair_exchange_payload_v2() -> DexPairBuildCrossPairExchangePayloadV2Function:
        return DEXPAIR_ABI.get_function("buildCrossPairExchangePayloadV2")

    @staticmethod
    def expected_deposit_liquidity() -> DexPairExpectedDepositLiquidityFunction:
        return DEXPAIR_ABI.get_function("expectedDepositLiquidity")

    @staticmethod
    def deposit_liquidity() -> DexPairDepositLiquidityFunction:
        return DEXPAIR_ABI.get_function("depositLiquidity")

    @staticmethod
    def expected_withdraw_liquidity() -> DexPairExpectedWithdrawLiquidityFunction:
        return DEXPAIR_ABI.get_function("expectedWithdrawLiquidity")

    @staticmethod
    def withdraw_liquidity() -> DexPairWithdrawLiquidityFunction:
        return DEXPAIR_ABI.get_function("withdrawLiquidity")

    @staticmethod
    def expected_exchange() -> DexPairExpectedExchangeFunction:
        return DEXPAIR_ABI.get_function("expectedExchange")

    @staticmethod
    def expected_spend_amount() -> DexPairExpectedSpendAmountFunction:
        return DEXPAIR_ABI.get_function("expectedSpendAmount")

    @staticmethod
    def exchange() -> DexPairExchangeFunction:
        return DEXPAIR_ABI.get_function("exchange")

    @staticmethod
    def cross_pool_exchange() -> DexPairCrossPoolExchangeFunction:
        return DEXPAIR_ABI.get_function("crossPoolExchange")

    @staticmethod
    def on_accept_tokens_transfer() -> DexPairOnAcceptTokensTransferFunction:
        return DEXPAIR_ABI.get_function("onAcceptTokensTransfer")

    @staticmethod
    def get_root() -> DexPairGetRootFunction:
        return DEXPAIR_ABI.get_function("getRoot")

    @staticmethod
    def get_token_roots() -> DexPairGetTokenRootsFunction:
        return DEXPAIR_ABI.get_function("getTokenRoots")

    @staticmethod
    def get_token_wallets() -> DexPairGetTokenWalletsFunction:
        return DEXPAIR_ABI.get_function("getTokenWallets")

    @staticmethod
    def get_version() -> DexPairGetVersionFunction:
        return DEXPAIR_ABI.get_function("getVersion")

    @staticmethod
    def get_vault() -> DexPairGetVaultFunction:
        return DEXPAIR_ABI.get_function("getVault")

    @staticmethod
    def get_pool_type() -> DexPairGetPoolTypeFunction:
        return DEXPAIR_ABI.get_function("getPoolType")

    @staticmethod
    def get_fee_params() -> DexPairGetFeeParamsFunction:
        return DEXPAIR_ABI.get_function("getFeeParams")

    @staticmethod
    def get_accumulated_fees() -> DexPairGetAccumulatedFeesFunction:
        return DEXPAIR_ABI.get_function("getAccumulatedFees")

    @staticmethod
    def is_active() -> DexPairIsActiveFunction:
        return DEXPAIR_ABI.get_function("isActive")

    @staticmethod
    def get_balances() -> DexPairGetBalancesFunction:
        return DEXPAIR_ABI.get_function("getBalances")

    @staticmethod
    def set_fee_params() -> DexPairSetFeeParamsFunction:
        return DEXPAIR_ABI.get_function("setFeeParams")

    @staticmethod
    def withdraw_beneficiary_fee() -> DexPairWithdrawBeneficiaryFeeFunction:
        return DEXPAIR_ABI.get_function("withdrawBeneficiaryFee")

    @staticmethod
    def check_pair() -> DexPairCheckPairFunction:
        return DEXPAIR_ABI.get_function("checkPair")

    @staticmethod
    def upgrade() -> DexPairUpgradeFunction:
        return DEXPAIR_ABI.get_function("upgrade")

    @staticmethod
    def liquidity_token_root_deployed() -> DexPairLiquidityTokenRootDeployedFunction:
        return DEXPAIR_ABI.get_function("liquidityTokenRootDeployed")

    @staticmethod
    def liquidity_token_root_not_deployed() -> DexPairLiquidityTokenRootNotDeployedFunction:
        return DEXPAIR_ABI.get_function("liquidityTokenRootNotDeployed")

    @staticmethod
    def on_token_wallet() -> DexPairOnTokenWalletFunction:
        return DEXPAIR_ABI.get_function("onTokenWallet")

    @staticmethod
    def set_active() -> DexPairSetActiveFunction:
        return DEXPAIR_ABI.get_function("setActive")

    @staticmethod
    def set_oracle_options() -> DexPairSetOracleOptionsFunction:
        return DEXPAIR_ABI.get_function("setOracleOptions")

    @staticmethod
    def get_oracle_options() -> DexPairGetOracleOptionsFunction:
        return DEXPAIR_ABI.get_function("getOracleOptions")

    @staticmethod
    def remove_last_n_points() -> DexPairRemoveLastNPointsFunction:
        return DEXPAIR_ABI.get_function("removeLastNPoints")

    @staticmethod
    def get_observation() -> DexPairGetObservationFunction:
        return DEXPAIR_ABI.get_function("getObservation")

    @staticmethod
    def observation() -> DexPairObservationFunction:
        return DEXPAIR_ABI.get_function("observation")

    @staticmethod
    def get_rate() -> DexPairGetRateFunction:
        return DEXPAIR_ABI.get_function("getRate")

    @staticmethod
    def rate() -> DexPairRateFunction:
        return DEXPAIR_ABI.get_function("rate")

    @staticmethod
    def get_expected_amount_by_twap() -> DexPairGetExpectedAmountByTWAPFunction:
        return DEXPAIR_ABI.get_function("getExpectedAmountByTWAP")

    @staticmethod
    def platform_code() -> DexPairPlatformCodeFunction:
        return DEXPAIR_ABI.get_function("platform_code")
