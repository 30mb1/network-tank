"""
This file was auto generated by nekoton.
"""

from typing import List as _List, Dict as _Dict, Optional as _Optional, TypedDict as _TypedDict
from nekoton import (
    FunctionAbi as _FunctionAbi,
    Address as _Address,
    ContractAbi as _ContractAbi,
    FunctionAbiWithArgs as _FunctionAbiWithArgs,
    FunctionCall as _FunctionCall,
    Cell as _Cell,
    Tokens as _Tokens,
    Transaction as _Transaction,
)


DEXROOT_ABI = _ContractAbi(
    r"""{"ABI version": 2, "data": [{"key": 1, "name": "_nonce", "type": "uint32"}], "events": [{"inputs": [{"name": "version", "type": "uint32"}], "name": "AccountCodeUpgraded", "outputs": []}, {"inputs": [{"name": "version", "type": "uint32"}, {"name": "poolType", "type": "uint8"}], "name": "PairCodeUpgraded", "outputs": []}, {"inputs": [{"name": "version", "type": "uint32"}, {"name": "poolType", "type": "uint8"}], "name": "PoolCodeUpgraded", "outputs": []}, {"inputs": [{"name": "version", "type": "uint32"}, {"name": "codeHash", "type": "uint256"}], "name": "TokenVaultCodeUpgraded", "outputs": []}, {"inputs": [{"name": "version", "type": "uint32"}, {"name": "codeHash", "type": "uint256"}], "name": "LpTokenPendingCodeUpgraded", "outputs": []}, {"inputs": [{"name": "current", "type": "address"}, {"name": "previous", "type": "address"}], "name": "TokenFactoryUpdated", "outputs": []}, {"inputs": [], "name": "RootCodeUpgraded", "outputs": []}, {"inputs": [{"name": "newActive", "type": "bool"}], "name": "ActiveUpdated", "outputs": []}, {"inputs": [{"name": "roots", "type": "address[]"}], "name": "RequestedPoolUpgrade", "outputs": []}, {"inputs": [{"name": "accountOwner", "type": "address"}], "name": "RequestedForceAccountUpgrade", "outputs": []}, {"inputs": [{"name": "oldOwner", "type": "address"}, {"name": "newOwner", "type": "address"}], "name": "RequestedOwnerTransfer", "outputs": []}, {"inputs": [{"name": "oldOwner", "type": "address"}, {"name": "newOwner", "type": "address"}], "name": "OwnerTransferAccepted", "outputs": []}, {"inputs": [{"name": "roots", "type": "address[]"}, {"name": "poolType", "type": "uint8"}], "name": "NewPoolCreated", "outputs": []}, {"inputs": [{"name": "vault", "type": "address"}, {"name": "tokenRoot", "type": "address"}, {"name": "tokenWallet", "type": "address"}, {"name": "version", "type": "uint32"}], "name": "NewTokenVaultCreated", "outputs": []}, {"inputs": [{"name": "pool", "type": "address"}, {"name": "poolTokenRoots", "type": "address[]"}, {"name": "lpTokenRoot", "type": "address"}, {"name": "lpPendingNonce", "type": "uint32"}], "name": "NewLpTokenRootCreated", "outputs": []}], "fields": [{"name": "_pubkey", "type": "uint256"}, {"name": "_timestamp", "type": "uint64"}, {"name": "_constructorFlag", "type": "bool"}, {"name": "platform_code", "type": "cell"}, {"name": "_nonce", "type": "uint32"}, {"name": "_accountCode", "type": "cell"}, {"name": "_accountVersion", "type": "uint32"}, {"name": "_pairCodes", "type": "map(uint8,cell)"}, {"name": "_pairVersions", "type": "map(uint8,uint32)"}, {"name": "_poolCodes", "type": "map(uint8,cell)"}, {"name": "_poolVersions", "type": "map(uint8,uint32)"}, {"name": "_vaultCode", "type": "cell"}, {"name": "_vaultVersion", "type": "uint32"}, {"name": "_lpTokenPendingCode", "type": "cell"}, {"name": "_lpTokenPendingVersion", "type": "uint32"}, {"name": "_tokenFactory", "type": "address"}, {"name": "_active", "type": "bool"}, {"name": "_owner", "type": "address"}, {"name": "_vault", "type": "address"}, {"name": "_pendingOwner", "type": "address"}, {"name": "_manager", "type": "address"}], "functions": [{"inputs": [{"name": "initial_owner", "type": "address"}, {"name": "initial_vault", "type": "address"}], "name": "constructor", "outputs": []}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getAccountVersion", "outputs": [{"name": "value0", "type": "uint32"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getAccountCode", "outputs": [{"name": "value0", "type": "cell"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}, {"name": "pool_type", "type": "uint8"}], "name": "getPairVersion", "outputs": [{"name": "value0", "type": "uint32"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}, {"name": "pool_type", "type": "uint8"}], "name": "getPoolVersion", "outputs": [{"name": "value0", "type": "uint32"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}, {"name": "pool_type", "type": "uint8"}], "name": "getPairCode", "outputs": [{"name": "value0", "type": "cell"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}, {"name": "pool_type", "type": "uint8"}], "name": "getPoolCode", "outputs": [{"name": "value0", "type": "cell"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getVault", "outputs": [{"name": "value0", "type": "address"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getTokenVaultCode", "outputs": [{"name": "value0", "type": "cell"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getTokenVaultVersion", "outputs": [{"name": "value0", "type": "uint32"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getLpTokenPendingCode", "outputs": [{"name": "value0", "type": "cell"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getLpTokenPendingVersion", "outputs": [{"name": "value0", "type": "uint32"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getTokenFactory", "outputs": [{"name": "value0", "type": "address"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "isActive", "outputs": [{"name": "value0", "type": "bool"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getOwner", "outputs": [{"name": "dex_owner", "type": "address"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getPendingOwner", "outputs": [{"name": "dex_pending_owner", "type": "address"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}, {"name": "account_owner", "type": "address"}], "name": "getExpectedAccountAddress", "outputs": [{"name": "value0", "type": "address"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}, {"name": "left_root", "type": "address"}, {"name": "right_root", "type": "address"}], "name": "getExpectedPairAddress", "outputs": [{"name": "value0", "type": "address"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}, {"name": "_roots", "type": "address[]"}], "name": "getExpectedPoolAddress", "outputs": [{"name": "value0", "type": "address"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}, {"name": "_tokenRoot", "type": "address"}], "name": "getExpectedTokenVaultAddress", "outputs": [{"name": "value0", "type": "address"}]}, {"inputs": [{"name": "answerId", "type": "uint32"}], "name": "getManager", "outputs": [{"name": "value0", "type": "address"}]}, {"inputs": [{"name": "new_vault", "type": "address"}], "name": "setVaultOnce", "outputs": []}, {"inputs": [{"name": "new_active", "type": "bool"}], "name": "setActive", "outputs": []}, {"inputs": [{"name": "_newManager", "type": "address"}], "name": "setManager", "outputs": []}, {"inputs": [], "name": "revokeManager", "outputs": []}, {"inputs": [{"name": "new_owner", "type": "address"}], "name": "transferOwner", "outputs": []}, {"inputs": [], "name": "acceptOwner", "outputs": []}, {"inputs": [{"name": "_newTokenFactory", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}], "name": "setTokenFactory", "outputs": []}, {"inputs": [{"name": "code", "type": "cell"}], "name": "installPlatformOnce", "outputs": []}, {"inputs": [{"name": "code", "type": "cell"}], "name": "installOrUpdateAccountCode", "outputs": []}, {"inputs": [{"name": "code", "type": "cell"}, {"name": "pool_type", "type": "uint8"}], "name": "installOrUpdatePairCode", "outputs": []}, {"inputs": [{"name": "code", "type": "cell"}, {"name": "pool_type", "type": "uint8"}], "name": "installOrUpdatePoolCode", "outputs": []}, {"inputs": [{"name": "_newCode", "type": "cell"}, {"name": "_remainingGasTo", "type": "address"}], "name": "installOrUpdateTokenVaultCode", "outputs": []}, {"inputs": [{"name": "_newCode", "type": "cell"}, {"name": "_remainingGasTo", "type": "address"}], "name": "installOrUpdateLpTokenPendingCode", "outputs": []}, {"inputs": [{"name": "code", "type": "cell"}], "name": "upgrade", "outputs": []}, {"inputs": [{"name": "receiver", "type": "address"}], "name": "resetGas", "outputs": []}, {"inputs": [{"name": "_tokenRoot", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}], "name": "deployTokenVault", "outputs": []}, {"inputs": [{"name": "_version", "type": "uint32"}, {"name": "_tokenRoot", "type": "address"}, {"name": "_tokenWallet", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}], "name": "onTokenVaultDeployed", "outputs": []}, {"inputs": [{"name": "_tokenRoots", "type": "address[]"}, {"name": "_remainingGasTo", "type": "address"}], "name": "deployLpToken", "outputs": []}, {"inputs": [{"name": "_lpPendingNonce", "type": "uint32"}, {"name": "_pool", "type": "address"}, {"name": "_roots", "type": "address[]"}, {"name": "_lpRoot", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}], "name": "onLiquidityTokenDeployed", "outputs": []}, {"inputs": [{"name": "_lpPendingNonce", "type": "uint32"}, {"name": "_pool", "type": "address"}, {"name": "_roots", "type": "address[]"}, {"name": "_lpRoot", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}], "name": "onLiquidityTokenNotDeployed", "outputs": []}, {"inputs": [{"name": "_tokenRoot", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}], "name": "upgradeTokenVault", "outputs": []}, {"inputs": [{"name": "_tokenRoots", "type": "address[]"}, {"name": "_offset", "type": "uint32"}, {"name": "_remainingGasTo", "type": "address"}], "name": "upgradeTokenVaults", "outputs": []}, {"inputs": [{"name": "account_owner", "type": "address"}, {"name": "send_gas_to", "type": "address"}], "name": "deployAccount", "outputs": []}, {"inputs": [{"name": "current_version", "type": "uint32"}, {"name": "send_gas_to", "type": "address"}, {"name": "account_owner", "type": "address"}], "name": "requestUpgradeAccount", "outputs": []}, {"inputs": [{"name": "account_owner", "type": "address"}, {"name": "send_gas_to", "type": "address"}], "name": "forceUpgradeAccount", "outputs": []}, {"inputs": [{"name": "_accountsOwners", "type": "address[]"}, {"name": "_offset", "type": "uint32"}, {"name": "_remainingGasTo", "type": "address"}], "name": "upgradeAccounts", "outputs": []}, {"inputs": [{"name": "left_root", "type": "address"}, {"name": "right_root", "type": "address"}, {"name": "pool_type", "type": "uint8"}, {"name": "send_gas_to", "type": "address"}], "name": "upgradePair", "outputs": []}, {"inputs": [{"name": "roots", "type": "address[]"}, {"name": "pool_type", "type": "uint8"}, {"name": "send_gas_to", "type": "address"}], "name": "upgradePool", "outputs": []}, {"inputs": [{"components": [{"name": "tokenRoots", "type": "address[]"}, {"name": "poolType", "type": "uint8"}], "name": "_params", "type": "tuple[]"}, {"name": "_offset", "type": "uint32"}, {"name": "_remainingGasTo", "type": "address"}], "name": "upgradePools", "outputs": []}, {"inputs": [{"components": [{"name": "tokenRoots", "type": "address[]"}, {"name": "newActive", "type": "bool"}], "name": "_param", "type": "tuple"}, {"name": "_remainingGasTo", "type": "address"}], "name": "setPoolActive", "outputs": []}, {"inputs": [{"components": [{"name": "tokenRoots", "type": "address[]"}, {"name": "newActive", "type": "bool"}], "name": "_params", "type": "tuple[]"}, {"name": "_offset", "type": "uint32"}, {"name": "_remainingGasTo", "type": "address"}], "name": "setPoolsActive", "outputs": []}, {"inputs": [{"name": "left_root", "type": "address"}, {"name": "right_root", "type": "address"}, {"name": "send_gas_to", "type": "address"}], "name": "deployPair", "outputs": []}, {"inputs": [{"name": "roots", "type": "address[]"}, {"name": "send_gas_to", "type": "address"}], "name": "deployStablePool", "outputs": []}, {"inputs": [{"name": "_roots", "type": "address[]"}, {"components": [{"name": "denominator", "type": "uint128"}, {"name": "pool_numerator", "type": "uint128"}, {"name": "beneficiary_numerator", "type": "uint128"}, {"name": "referrer_numerator", "type": "uint128"}, {"name": "beneficiary", "type": "address"}, {"name": "threshold", "type": "map(address,uint128)"}, {"name": "referrer_threshold", "type": "map(address,uint128)"}], "name": "_params", "type": "tuple"}, {"name": "_remainingGasTo", "type": "address"}], "name": "setPairFeeParams", "outputs": []}, {"inputs": [{"name": "_roots", "type": "address[]"}, {"components": [{"name": "value", "type": "uint128"}, {"name": "precision", "type": "uint128"}], "name": "_A", "type": "tuple"}, {"name": "_remainingGasTo", "type": "address"}], "name": "setPairAmplificationCoefficient", "outputs": []}, {"inputs": [{"name": "target", "type": "address"}, {"name": "receiver", "type": "address"}], "name": "resetTargetGas", "outputs": []}, {"inputs": [{"name": "_roots", "type": "address[]"}, {"name": "_poolType", "type": "uint8"}, {"name": "_remainingGasTo", "type": "address"}], "name": "onPoolCreated", "outputs": []}, {"inputs": [{"name": "_leftRoot", "type": "address"}, {"name": "_rightRoot", "type": "address"}, {"components": [{"name": "minInterval", "type": "uint8"}, {"name": "minRateDeltaNumerator", "type": "uint128"}, {"name": "minRateDeltaDenominator", "type": "uint128"}, {"name": "cardinality", "type": "uint16"}], "name": "_options", "type": "tuple"}, {"name": "_remainingGasTo", "type": "address"}], "name": "setOracleOptions", "outputs": []}, {"inputs": [{"name": "_leftRoot", "type": "address"}, {"name": "_rightRoot", "type": "address"}, {"name": "_count", "type": "uint16"}, {"name": "_remainingGasTo", "type": "address"}], "name": "removeLastNPoints", "outputs": []}, {"inputs": [{"name": "_dexTokenVault", "type": "address"}, {"name": "_newWeverVaultTokenRoot", "type": "address"}, {"name": "_remainingGasTo", "type": "address"}], "name": "setWeverInDexTokenVault", "outputs": []}, {"inputs": [], "name": "platform_code", "outputs": [{"name": "platform_code", "type": "cell"}]}], "header": ["pubkey", "time", "expire"], "version": "2.2"}"""
)


class ConstructorInput(_TypedDict):
    initial_owner: _Address
    initial_vault: _Address


class ConstructorOutput(_TypedDict):
    pass


class DexRootConstructorFunctionCall(_FunctionCall):
    @property
    def input(self) -> ConstructorInput:
        return _FunctionCall.input

    @property
    def output(self) -> ConstructorOutput:
        return _FunctionCall.output


class GetAccountVersionInput(_TypedDict):
    answerId: int | _Tokens


class GetAccountVersionOutput(_TypedDict):
    value0: int | _Tokens


class DexRootGetAccountVersionFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetAccountVersionInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetAccountVersionOutput:
        return _FunctionCall.output


class GetAccountCodeInput(_TypedDict):
    answerId: int | _Tokens


class GetAccountCodeOutput(_TypedDict):
    value0: _Cell


class DexRootGetAccountCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetAccountCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetAccountCodeOutput:
        return _FunctionCall.output


class GetPairVersionInput(_TypedDict):
    answerId: int | _Tokens
    pool_type: int | _Tokens


class GetPairVersionOutput(_TypedDict):
    value0: int | _Tokens


class DexRootGetPairVersionFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetPairVersionInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetPairVersionOutput:
        return _FunctionCall.output


class GetPoolVersionInput(_TypedDict):
    answerId: int | _Tokens
    pool_type: int | _Tokens


class GetPoolVersionOutput(_TypedDict):
    value0: int | _Tokens


class DexRootGetPoolVersionFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetPoolVersionInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetPoolVersionOutput:
        return _FunctionCall.output


class GetPairCodeInput(_TypedDict):
    answerId: int | _Tokens
    pool_type: int | _Tokens


class GetPairCodeOutput(_TypedDict):
    value0: _Cell


class DexRootGetPairCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetPairCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetPairCodeOutput:
        return _FunctionCall.output


class GetPoolCodeInput(_TypedDict):
    answerId: int | _Tokens
    pool_type: int | _Tokens


class GetPoolCodeOutput(_TypedDict):
    value0: _Cell


class DexRootGetPoolCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetPoolCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetPoolCodeOutput:
        return _FunctionCall.output


class GetVaultInput(_TypedDict):
    answerId: int | _Tokens


class GetVaultOutput(_TypedDict):
    value0: _Address


class DexRootGetVaultFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetVaultInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetVaultOutput:
        return _FunctionCall.output


class GetTokenVaultCodeInput(_TypedDict):
    answerId: int | _Tokens


class GetTokenVaultCodeOutput(_TypedDict):
    value0: _Cell


class DexRootGetTokenVaultCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetTokenVaultCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetTokenVaultCodeOutput:
        return _FunctionCall.output


class GetTokenVaultVersionInput(_TypedDict):
    answerId: int | _Tokens


class GetTokenVaultVersionOutput(_TypedDict):
    value0: int | _Tokens


class DexRootGetTokenVaultVersionFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetTokenVaultVersionInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetTokenVaultVersionOutput:
        return _FunctionCall.output


class GetLpTokenPendingCodeInput(_TypedDict):
    answerId: int | _Tokens


class GetLpTokenPendingCodeOutput(_TypedDict):
    value0: _Cell


class DexRootGetLpTokenPendingCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetLpTokenPendingCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetLpTokenPendingCodeOutput:
        return _FunctionCall.output


class GetLpTokenPendingVersionInput(_TypedDict):
    answerId: int | _Tokens


class GetLpTokenPendingVersionOutput(_TypedDict):
    value0: int | _Tokens


class DexRootGetLpTokenPendingVersionFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetLpTokenPendingVersionInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetLpTokenPendingVersionOutput:
        return _FunctionCall.output


class GetTokenFactoryInput(_TypedDict):
    answerId: int | _Tokens


class GetTokenFactoryOutput(_TypedDict):
    value0: _Address


class DexRootGetTokenFactoryFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetTokenFactoryInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetTokenFactoryOutput:
        return _FunctionCall.output


class IsActiveInput(_TypedDict):
    answerId: int | _Tokens


class IsActiveOutput(_TypedDict):
    value0: bool


class DexRootIsActiveFunctionCall(_FunctionCall):
    @property
    def input(self) -> IsActiveInput:
        return _FunctionCall.input

    @property
    def output(self) -> IsActiveOutput:
        return _FunctionCall.output


class GetOwnerInput(_TypedDict):
    answerId: int | _Tokens


class GetOwnerOutput(_TypedDict):
    dex_owner: _Address


class DexRootGetOwnerFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetOwnerInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetOwnerOutput:
        return _FunctionCall.output


class GetPendingOwnerInput(_TypedDict):
    answerId: int | _Tokens


class GetPendingOwnerOutput(_TypedDict):
    dex_pending_owner: _Address


class DexRootGetPendingOwnerFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetPendingOwnerInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetPendingOwnerOutput:
        return _FunctionCall.output


class GetExpectedAccountAddressInput(_TypedDict):
    answerId: int | _Tokens
    account_owner: _Address


class GetExpectedAccountAddressOutput(_TypedDict):
    value0: _Address


class DexRootGetExpectedAccountAddressFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetExpectedAccountAddressInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetExpectedAccountAddressOutput:
        return _FunctionCall.output


class GetExpectedPairAddressInput(_TypedDict):
    answerId: int | _Tokens
    left_root: _Address
    right_root: _Address


class GetExpectedPairAddressOutput(_TypedDict):
    value0: _Address


class DexRootGetExpectedPairAddressFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetExpectedPairAddressInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetExpectedPairAddressOutput:
        return _FunctionCall.output


class GetExpectedPoolAddressInput(_TypedDict):
    answerId: int | _Tokens
    _roots: _List[_Address]


class GetExpectedPoolAddressOutput(_TypedDict):
    value0: _Address


class DexRootGetExpectedPoolAddressFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetExpectedPoolAddressInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetExpectedPoolAddressOutput:
        return _FunctionCall.output


class GetExpectedTokenVaultAddressInput(_TypedDict):
    answerId: int | _Tokens
    _tokenRoot: _Address


class GetExpectedTokenVaultAddressOutput(_TypedDict):
    value0: _Address


class DexRootGetExpectedTokenVaultAddressFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetExpectedTokenVaultAddressInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetExpectedTokenVaultAddressOutput:
        return _FunctionCall.output


class GetManagerInput(_TypedDict):
    answerId: int | _Tokens


class GetManagerOutput(_TypedDict):
    value0: _Address


class DexRootGetManagerFunctionCall(_FunctionCall):
    @property
    def input(self) -> GetManagerInput:
        return _FunctionCall.input

    @property
    def output(self) -> GetManagerOutput:
        return _FunctionCall.output


class SetVaultOnceInput(_TypedDict):
    new_vault: _Address


class SetVaultOnceOutput(_TypedDict):
    pass


class DexRootSetVaultOnceFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetVaultOnceInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetVaultOnceOutput:
        return _FunctionCall.output


class SetActiveInput(_TypedDict):
    new_active: bool


class SetActiveOutput(_TypedDict):
    pass


class DexRootSetActiveFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetActiveInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetActiveOutput:
        return _FunctionCall.output


class SetManagerInput(_TypedDict):
    _newManager: _Address


class SetManagerOutput(_TypedDict):
    pass


class DexRootSetManagerFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetManagerInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetManagerOutput:
        return _FunctionCall.output


class RevokeManagerInput(_TypedDict):
    pass


class RevokeManagerOutput(_TypedDict):
    pass


class DexRootRevokeManagerFunctionCall(_FunctionCall):
    @property
    def input(self) -> RevokeManagerInput:
        return _FunctionCall.input

    @property
    def output(self) -> RevokeManagerOutput:
        return _FunctionCall.output


class TransferOwnerInput(_TypedDict):
    new_owner: _Address


class TransferOwnerOutput(_TypedDict):
    pass


class DexRootTransferOwnerFunctionCall(_FunctionCall):
    @property
    def input(self) -> TransferOwnerInput:
        return _FunctionCall.input

    @property
    def output(self) -> TransferOwnerOutput:
        return _FunctionCall.output


class AcceptOwnerInput(_TypedDict):
    pass


class AcceptOwnerOutput(_TypedDict):
    pass


class DexRootAcceptOwnerFunctionCall(_FunctionCall):
    @property
    def input(self) -> AcceptOwnerInput:
        return _FunctionCall.input

    @property
    def output(self) -> AcceptOwnerOutput:
        return _FunctionCall.output


class SetTokenFactoryInput(_TypedDict):
    _newTokenFactory: _Address
    _remainingGasTo: _Address


class SetTokenFactoryOutput(_TypedDict):
    pass


class DexRootSetTokenFactoryFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetTokenFactoryInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetTokenFactoryOutput:
        return _FunctionCall.output


class InstallPlatformOnceInput(_TypedDict):
    code: _Cell


class InstallPlatformOnceOutput(_TypedDict):
    pass


class DexRootInstallPlatformOnceFunctionCall(_FunctionCall):
    @property
    def input(self) -> InstallPlatformOnceInput:
        return _FunctionCall.input

    @property
    def output(self) -> InstallPlatformOnceOutput:
        return _FunctionCall.output


class InstallOrUpdateAccountCodeInput(_TypedDict):
    code: _Cell


class InstallOrUpdateAccountCodeOutput(_TypedDict):
    pass


class DexRootInstallOrUpdateAccountCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> InstallOrUpdateAccountCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> InstallOrUpdateAccountCodeOutput:
        return _FunctionCall.output


class InstallOrUpdatePairCodeInput(_TypedDict):
    code: _Cell
    pool_type: int | _Tokens


class InstallOrUpdatePairCodeOutput(_TypedDict):
    pass


class DexRootInstallOrUpdatePairCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> InstallOrUpdatePairCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> InstallOrUpdatePairCodeOutput:
        return _FunctionCall.output


class InstallOrUpdatePoolCodeInput(_TypedDict):
    code: _Cell
    pool_type: int | _Tokens


class InstallOrUpdatePoolCodeOutput(_TypedDict):
    pass


class DexRootInstallOrUpdatePoolCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> InstallOrUpdatePoolCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> InstallOrUpdatePoolCodeOutput:
        return _FunctionCall.output


class InstallOrUpdateTokenVaultCodeInput(_TypedDict):
    _newCode: _Cell
    _remainingGasTo: _Address


class InstallOrUpdateTokenVaultCodeOutput(_TypedDict):
    pass


class DexRootInstallOrUpdateTokenVaultCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> InstallOrUpdateTokenVaultCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> InstallOrUpdateTokenVaultCodeOutput:
        return _FunctionCall.output


class InstallOrUpdateLpTokenPendingCodeInput(_TypedDict):
    _newCode: _Cell
    _remainingGasTo: _Address


class InstallOrUpdateLpTokenPendingCodeOutput(_TypedDict):
    pass


class DexRootInstallOrUpdateLpTokenPendingCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> InstallOrUpdateLpTokenPendingCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> InstallOrUpdateLpTokenPendingCodeOutput:
        return _FunctionCall.output


class UpgradeInput(_TypedDict):
    code: _Cell


class UpgradeOutput(_TypedDict):
    pass


class DexRootUpgradeFunctionCall(_FunctionCall):
    @property
    def input(self) -> UpgradeInput:
        return _FunctionCall.input

    @property
    def output(self) -> UpgradeOutput:
        return _FunctionCall.output


class ResetGasInput(_TypedDict):
    receiver: _Address


class ResetGasOutput(_TypedDict):
    pass


class DexRootResetGasFunctionCall(_FunctionCall):
    @property
    def input(self) -> ResetGasInput:
        return _FunctionCall.input

    @property
    def output(self) -> ResetGasOutput:
        return _FunctionCall.output


class DeployTokenVaultInput(_TypedDict):
    _tokenRoot: _Address
    _remainingGasTo: _Address


class DeployTokenVaultOutput(_TypedDict):
    pass


class DexRootDeployTokenVaultFunctionCall(_FunctionCall):
    @property
    def input(self) -> DeployTokenVaultInput:
        return _FunctionCall.input

    @property
    def output(self) -> DeployTokenVaultOutput:
        return _FunctionCall.output


class OnTokenVaultDeployedInput(_TypedDict):
    _version: int | _Tokens
    _tokenRoot: _Address
    _tokenWallet: _Address
    _remainingGasTo: _Address


class OnTokenVaultDeployedOutput(_TypedDict):
    pass


class DexRootOnTokenVaultDeployedFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnTokenVaultDeployedInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnTokenVaultDeployedOutput:
        return _FunctionCall.output


class DeployLpTokenInput(_TypedDict):
    _tokenRoots: _List[_Address]
    _remainingGasTo: _Address


class DeployLpTokenOutput(_TypedDict):
    pass


class DexRootDeployLpTokenFunctionCall(_FunctionCall):
    @property
    def input(self) -> DeployLpTokenInput:
        return _FunctionCall.input

    @property
    def output(self) -> DeployLpTokenOutput:
        return _FunctionCall.output


class OnLiquidityTokenDeployedInput(_TypedDict):
    _lpPendingNonce: int | _Tokens
    _pool: _Address
    _roots: _List[_Address]
    _lpRoot: _Address
    _remainingGasTo: _Address


class OnLiquidityTokenDeployedOutput(_TypedDict):
    pass


class DexRootOnLiquidityTokenDeployedFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnLiquidityTokenDeployedInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnLiquidityTokenDeployedOutput:
        return _FunctionCall.output


class OnLiquidityTokenNotDeployedInput(_TypedDict):
    _lpPendingNonce: int | _Tokens
    _pool: _Address
    _roots: _List[_Address]
    _lpRoot: _Address
    _remainingGasTo: _Address


class OnLiquidityTokenNotDeployedOutput(_TypedDict):
    pass


class DexRootOnLiquidityTokenNotDeployedFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnLiquidityTokenNotDeployedInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnLiquidityTokenNotDeployedOutput:
        return _FunctionCall.output


class UpgradeTokenVaultInput(_TypedDict):
    _tokenRoot: _Address
    _remainingGasTo: _Address


class UpgradeTokenVaultOutput(_TypedDict):
    pass


class DexRootUpgradeTokenVaultFunctionCall(_FunctionCall):
    @property
    def input(self) -> UpgradeTokenVaultInput:
        return _FunctionCall.input

    @property
    def output(self) -> UpgradeTokenVaultOutput:
        return _FunctionCall.output


class UpgradeTokenVaultsInput(_TypedDict):
    _tokenRoots: _List[_Address]
    _offset: int | _Tokens
    _remainingGasTo: _Address


class UpgradeTokenVaultsOutput(_TypedDict):
    pass


class DexRootUpgradeTokenVaultsFunctionCall(_FunctionCall):
    @property
    def input(self) -> UpgradeTokenVaultsInput:
        return _FunctionCall.input

    @property
    def output(self) -> UpgradeTokenVaultsOutput:
        return _FunctionCall.output


class DeployAccountInput(_TypedDict):
    account_owner: _Address
    send_gas_to: _Address


class DeployAccountOutput(_TypedDict):
    pass


class DexRootDeployAccountFunctionCall(_FunctionCall):
    @property
    def input(self) -> DeployAccountInput:
        return _FunctionCall.input

    @property
    def output(self) -> DeployAccountOutput:
        return _FunctionCall.output


class RequestUpgradeAccountInput(_TypedDict):
    current_version: int | _Tokens
    send_gas_to: _Address
    account_owner: _Address


class RequestUpgradeAccountOutput(_TypedDict):
    pass


class DexRootRequestUpgradeAccountFunctionCall(_FunctionCall):
    @property
    def input(self) -> RequestUpgradeAccountInput:
        return _FunctionCall.input

    @property
    def output(self) -> RequestUpgradeAccountOutput:
        return _FunctionCall.output


class ForceUpgradeAccountInput(_TypedDict):
    account_owner: _Address
    send_gas_to: _Address


class ForceUpgradeAccountOutput(_TypedDict):
    pass


class DexRootForceUpgradeAccountFunctionCall(_FunctionCall):
    @property
    def input(self) -> ForceUpgradeAccountInput:
        return _FunctionCall.input

    @property
    def output(self) -> ForceUpgradeAccountOutput:
        return _FunctionCall.output


class UpgradeAccountsInput(_TypedDict):
    _accountsOwners: _List[_Address]
    _offset: int | _Tokens
    _remainingGasTo: _Address


class UpgradeAccountsOutput(_TypedDict):
    pass


class DexRootUpgradeAccountsFunctionCall(_FunctionCall):
    @property
    def input(self) -> UpgradeAccountsInput:
        return _FunctionCall.input

    @property
    def output(self) -> UpgradeAccountsOutput:
        return _FunctionCall.output


class UpgradePairInput(_TypedDict):
    left_root: _Address
    right_root: _Address
    pool_type: int | _Tokens
    send_gas_to: _Address


class UpgradePairOutput(_TypedDict):
    pass


class DexRootUpgradePairFunctionCall(_FunctionCall):
    @property
    def input(self) -> UpgradePairInput:
        return _FunctionCall.input

    @property
    def output(self) -> UpgradePairOutput:
        return _FunctionCall.output


class UpgradePoolInput(_TypedDict):
    roots: _List[_Address]
    pool_type: int | _Tokens
    send_gas_to: _Address


class UpgradePoolOutput(_TypedDict):
    pass


class DexRootUpgradePoolFunctionCall(_FunctionCall):
    @property
    def input(self) -> UpgradePoolInput:
        return _FunctionCall.input

    @property
    def output(self) -> UpgradePoolOutput:
        return _FunctionCall.output


class InternalStruct0(_TypedDict):
    tokenRoots: _List[_Address]
    poolType: int | _Tokens


class UpgradePoolsInput(_TypedDict):
    _params: _List[InternalStruct0]
    _offset: int | _Tokens
    _remainingGasTo: _Address


class UpgradePoolsOutput(_TypedDict):
    pass


class DexRootUpgradePoolsFunctionCall(_FunctionCall):
    @property
    def input(self) -> UpgradePoolsInput:
        return _FunctionCall.input

    @property
    def output(self) -> UpgradePoolsOutput:
        return _FunctionCall.output


class InternalStruct1(_TypedDict):
    tokenRoots: _List[_Address]
    newActive: bool


class SetPoolActiveInput(_TypedDict):
    _param: InternalStruct1
    _remainingGasTo: _Address


class SetPoolActiveOutput(_TypedDict):
    pass


class DexRootSetPoolActiveFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetPoolActiveInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetPoolActiveOutput:
        return _FunctionCall.output


class SetPoolsActiveInput(_TypedDict):
    _params: _List[InternalStruct1]
    _offset: int | _Tokens
    _remainingGasTo: _Address


class SetPoolsActiveOutput(_TypedDict):
    pass


class DexRootSetPoolsActiveFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetPoolsActiveInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetPoolsActiveOutput:
        return _FunctionCall.output


class DeployPairInput(_TypedDict):
    left_root: _Address
    right_root: _Address
    send_gas_to: _Address


class DeployPairOutput(_TypedDict):
    pass


class DexRootDeployPairFunctionCall(_FunctionCall):
    @property
    def input(self) -> DeployPairInput:
        return _FunctionCall.input

    @property
    def output(self) -> DeployPairOutput:
        return _FunctionCall.output


class DeployStablePoolInput(_TypedDict):
    roots: _List[_Address]
    send_gas_to: _Address


class DeployStablePoolOutput(_TypedDict):
    pass


class DexRootDeployStablePoolFunctionCall(_FunctionCall):
    @property
    def input(self) -> DeployStablePoolInput:
        return _FunctionCall.input

    @property
    def output(self) -> DeployStablePoolOutput:
        return _FunctionCall.output


class InternalStruct2(_TypedDict):
    denominator: int | _Tokens
    pool_numerator: int | _Tokens
    beneficiary_numerator: int | _Tokens
    referrer_numerator: int | _Tokens
    beneficiary: _Address
    threshold: _Dict[_Address, int | _Tokens]
    referrer_threshold: _Dict[_Address, int | _Tokens]


class SetPairFeeParamsInput(_TypedDict):
    _roots: _List[_Address]
    _params: InternalStruct2
    _remainingGasTo: _Address


class SetPairFeeParamsOutput(_TypedDict):
    pass


class DexRootSetPairFeeParamsFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetPairFeeParamsInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetPairFeeParamsOutput:
        return _FunctionCall.output


class InternalStruct3(_TypedDict):
    value: int | _Tokens
    precision: int | _Tokens


class SetPairAmplificationCoefficientInput(_TypedDict):
    _roots: _List[_Address]
    _A: InternalStruct3
    _remainingGasTo: _Address


class SetPairAmplificationCoefficientOutput(_TypedDict):
    pass


class DexRootSetPairAmplificationCoefficientFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetPairAmplificationCoefficientInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetPairAmplificationCoefficientOutput:
        return _FunctionCall.output


class ResetTargetGasInput(_TypedDict):
    target: _Address
    receiver: _Address


class ResetTargetGasOutput(_TypedDict):
    pass


class DexRootResetTargetGasFunctionCall(_FunctionCall):
    @property
    def input(self) -> ResetTargetGasInput:
        return _FunctionCall.input

    @property
    def output(self) -> ResetTargetGasOutput:
        return _FunctionCall.output


class OnPoolCreatedInput(_TypedDict):
    _roots: _List[_Address]
    _poolType: int | _Tokens
    _remainingGasTo: _Address


class OnPoolCreatedOutput(_TypedDict):
    pass


class DexRootOnPoolCreatedFunctionCall(_FunctionCall):
    @property
    def input(self) -> OnPoolCreatedInput:
        return _FunctionCall.input

    @property
    def output(self) -> OnPoolCreatedOutput:
        return _FunctionCall.output


class InternalStruct4(_TypedDict):
    minInterval: int | _Tokens
    minRateDeltaNumerator: int | _Tokens
    minRateDeltaDenominator: int | _Tokens
    cardinality: int | _Tokens


class SetOracleOptionsInput(_TypedDict):
    _leftRoot: _Address
    _rightRoot: _Address
    _options: InternalStruct4
    _remainingGasTo: _Address


class SetOracleOptionsOutput(_TypedDict):
    pass


class DexRootSetOracleOptionsFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetOracleOptionsInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetOracleOptionsOutput:
        return _FunctionCall.output


class RemoveLastNPointsInput(_TypedDict):
    _leftRoot: _Address
    _rightRoot: _Address
    _count: int | _Tokens
    _remainingGasTo: _Address


class RemoveLastNPointsOutput(_TypedDict):
    pass


class DexRootRemoveLastNPointsFunctionCall(_FunctionCall):
    @property
    def input(self) -> RemoveLastNPointsInput:
        return _FunctionCall.input

    @property
    def output(self) -> RemoveLastNPointsOutput:
        return _FunctionCall.output


class SetWeverInDexTokenVaultInput(_TypedDict):
    _dexTokenVault: _Address
    _newWeverVaultTokenRoot: _Address
    _remainingGasTo: _Address


class SetWeverInDexTokenVaultOutput(_TypedDict):
    pass


class DexRootSetWeverInDexTokenVaultFunctionCall(_FunctionCall):
    @property
    def input(self) -> SetWeverInDexTokenVaultInput:
        return _FunctionCall.input

    @property
    def output(self) -> SetWeverInDexTokenVaultOutput:
        return _FunctionCall.output


class PlatformCodeInput(_TypedDict):
    pass


class PlatformCodeOutput(_TypedDict):
    platform_code: _Cell


class DexRootPlatformCodeFunctionCall(_FunctionCall):
    @property
    def input(self) -> PlatformCodeInput:
        return _FunctionCall.input

    @property
    def output(self) -> PlatformCodeOutput:
        return _FunctionCall.output


class DexRootConstructorFunction(_FunctionAbi):
    def with_args(self, args: ConstructorInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ConstructorInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ConstructorOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootConstructorFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetAccountVersionFunction(_FunctionAbi):
    def with_args(self, args: GetAccountVersionInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetAccountVersionInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetAccountVersionOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetAccountVersionFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetAccountCodeFunction(_FunctionAbi):
    def with_args(self, args: GetAccountCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetAccountCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetAccountCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetAccountCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetPairVersionFunction(_FunctionAbi):
    def with_args(self, args: GetPairVersionInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetPairVersionInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetPairVersionOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetPairVersionFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetPoolVersionFunction(_FunctionAbi):
    def with_args(self, args: GetPoolVersionInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetPoolVersionInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetPoolVersionOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetPoolVersionFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetPairCodeFunction(_FunctionAbi):
    def with_args(self, args: GetPairCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetPairCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetPairCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetPairCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetPoolCodeFunction(_FunctionAbi):
    def with_args(self, args: GetPoolCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetPoolCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetPoolCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetPoolCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetVaultFunction(_FunctionAbi):
    def with_args(self, args: GetVaultInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetVaultInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetVaultOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetVaultFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetTokenVaultCodeFunction(_FunctionAbi):
    def with_args(self, args: GetTokenVaultCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetTokenVaultCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetTokenVaultCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetTokenVaultCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetTokenVaultVersionFunction(_FunctionAbi):
    def with_args(self, args: GetTokenVaultVersionInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetTokenVaultVersionInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetTokenVaultVersionOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetTokenVaultVersionFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetLpTokenPendingCodeFunction(_FunctionAbi):
    def with_args(self, args: GetLpTokenPendingCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetLpTokenPendingCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetLpTokenPendingCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetLpTokenPendingCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetLpTokenPendingVersionFunction(_FunctionAbi):
    def with_args(self, args: GetLpTokenPendingVersionInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetLpTokenPendingVersionInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> GetLpTokenPendingVersionOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetLpTokenPendingVersionFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetTokenFactoryFunction(_FunctionAbi):
    def with_args(self, args: GetTokenFactoryInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetTokenFactoryInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetTokenFactoryOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetTokenFactoryFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootIsActiveFunction(_FunctionAbi):
    def with_args(self, args: IsActiveInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> IsActiveInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> IsActiveOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootIsActiveFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetOwnerFunction(_FunctionAbi):
    def with_args(self, args: GetOwnerInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> GetOwnerInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetOwnerOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetOwnerFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetPendingOwnerFunction(_FunctionAbi):
    def with_args(self, args: GetPendingOwnerInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetPendingOwnerInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetPendingOwnerOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetPendingOwnerFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetExpectedAccountAddressFunction(_FunctionAbi):
    def with_args(self, args: GetExpectedAccountAddressInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetExpectedAccountAddressInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> GetExpectedAccountAddressOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetExpectedAccountAddressFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetExpectedPairAddressFunction(_FunctionAbi):
    def with_args(self, args: GetExpectedPairAddressInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetExpectedPairAddressInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetExpectedPairAddressOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetExpectedPairAddressFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetExpectedPoolAddressFunction(_FunctionAbi):
    def with_args(self, args: GetExpectedPoolAddressInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetExpectedPoolAddressInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetExpectedPoolAddressOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetExpectedPoolAddressFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetExpectedTokenVaultAddressFunction(_FunctionAbi):
    def with_args(self, args: GetExpectedTokenVaultAddressInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetExpectedTokenVaultAddressInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> GetExpectedTokenVaultAddressOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetExpectedTokenVaultAddressFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootGetManagerFunction(_FunctionAbi):
    def with_args(self, args: GetManagerInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> GetManagerInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> GetManagerOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootGetManagerFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetVaultOnceFunction(_FunctionAbi):
    def with_args(self, args: SetVaultOnceInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetVaultOnceInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetVaultOnceOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetVaultOnceFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetActiveFunction(_FunctionAbi):
    def with_args(self, args: SetActiveInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetActiveInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetActiveOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetActiveFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetManagerFunction(_FunctionAbi):
    def with_args(self, args: SetManagerInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetManagerInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetManagerOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetManagerFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootRevokeManagerFunction(_FunctionAbi):
    def with_args(self, args: RevokeManagerInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> RevokeManagerInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> RevokeManagerOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootRevokeManagerFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootTransferOwnerFunction(_FunctionAbi):
    def with_args(self, args: TransferOwnerInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> TransferOwnerInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> TransferOwnerOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootTransferOwnerFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootAcceptOwnerFunction(_FunctionAbi):
    def with_args(self, args: AcceptOwnerInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> AcceptOwnerInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> AcceptOwnerOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootAcceptOwnerFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetTokenFactoryFunction(_FunctionAbi):
    def with_args(self, args: SetTokenFactoryInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetTokenFactoryInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetTokenFactoryOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetTokenFactoryFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootInstallPlatformOnceFunction(_FunctionAbi):
    def with_args(self, args: InstallPlatformOnceInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> InstallPlatformOnceInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> InstallPlatformOnceOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootInstallPlatformOnceFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootInstallOrUpdateAccountCodeFunction(_FunctionAbi):
    def with_args(self, args: InstallOrUpdateAccountCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdateAccountCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdateAccountCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootInstallOrUpdateAccountCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootInstallOrUpdatePairCodeFunction(_FunctionAbi):
    def with_args(self, args: InstallOrUpdatePairCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdatePairCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdatePairCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootInstallOrUpdatePairCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootInstallOrUpdatePoolCodeFunction(_FunctionAbi):
    def with_args(self, args: InstallOrUpdatePoolCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdatePoolCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdatePoolCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootInstallOrUpdatePoolCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootInstallOrUpdateTokenVaultCodeFunction(_FunctionAbi):
    def with_args(self, args: InstallOrUpdateTokenVaultCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdateTokenVaultCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdateTokenVaultCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootInstallOrUpdateTokenVaultCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootInstallOrUpdateLpTokenPendingCodeFunction(_FunctionAbi):
    def with_args(self, args: InstallOrUpdateLpTokenPendingCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdateLpTokenPendingCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> InstallOrUpdateLpTokenPendingCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootInstallOrUpdateLpTokenPendingCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootUpgradeFunction(_FunctionAbi):
    def with_args(self, args: UpgradeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> UpgradeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> UpgradeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootUpgradeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootResetGasFunction(_FunctionAbi):
    def with_args(self, args: ResetGasInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None) -> ResetGasInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ResetGasOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootResetGasFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootDeployTokenVaultFunction(_FunctionAbi):
    def with_args(self, args: DeployTokenVaultInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> DeployTokenVaultInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DeployTokenVaultOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootDeployTokenVaultFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootOnTokenVaultDeployedFunction(_FunctionAbi):
    def with_args(self, args: OnTokenVaultDeployedInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> OnTokenVaultDeployedInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> OnTokenVaultDeployedOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootOnTokenVaultDeployedFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootDeployLpTokenFunction(_FunctionAbi):
    def with_args(self, args: DeployLpTokenInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> DeployLpTokenInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DeployLpTokenOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootDeployLpTokenFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootOnLiquidityTokenDeployedFunction(_FunctionAbi):
    def with_args(self, args: OnLiquidityTokenDeployedInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> OnLiquidityTokenDeployedInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> OnLiquidityTokenDeployedOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootOnLiquidityTokenDeployedFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootOnLiquidityTokenNotDeployedFunction(_FunctionAbi):
    def with_args(self, args: OnLiquidityTokenNotDeployedInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> OnLiquidityTokenNotDeployedInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> OnLiquidityTokenNotDeployedOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootOnLiquidityTokenNotDeployedFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootUpgradeTokenVaultFunction(_FunctionAbi):
    def with_args(self, args: UpgradeTokenVaultInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> UpgradeTokenVaultInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> UpgradeTokenVaultOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootUpgradeTokenVaultFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootUpgradeTokenVaultsFunction(_FunctionAbi):
    def with_args(self, args: UpgradeTokenVaultsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> UpgradeTokenVaultsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> UpgradeTokenVaultsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootUpgradeTokenVaultsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootDeployAccountFunction(_FunctionAbi):
    def with_args(self, args: DeployAccountInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> DeployAccountInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DeployAccountOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootDeployAccountFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootRequestUpgradeAccountFunction(_FunctionAbi):
    def with_args(self, args: RequestUpgradeAccountInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> RequestUpgradeAccountInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> RequestUpgradeAccountOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootRequestUpgradeAccountFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootForceUpgradeAccountFunction(_FunctionAbi):
    def with_args(self, args: ForceUpgradeAccountInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ForceUpgradeAccountInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ForceUpgradeAccountOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootForceUpgradeAccountFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootUpgradeAccountsFunction(_FunctionAbi):
    def with_args(self, args: UpgradeAccountsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> UpgradeAccountsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> UpgradeAccountsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootUpgradeAccountsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootUpgradePairFunction(_FunctionAbi):
    def with_args(self, args: UpgradePairInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> UpgradePairInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> UpgradePairOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootUpgradePairFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootUpgradePoolFunction(_FunctionAbi):
    def with_args(self, args: UpgradePoolInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> UpgradePoolInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> UpgradePoolOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootUpgradePoolFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootUpgradePoolsFunction(_FunctionAbi):
    def with_args(self, args: UpgradePoolsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> UpgradePoolsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> UpgradePoolsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootUpgradePoolsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetPoolActiveFunction(_FunctionAbi):
    def with_args(self, args: SetPoolActiveInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetPoolActiveInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetPoolActiveOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetPoolActiveFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetPoolsActiveFunction(_FunctionAbi):
    def with_args(self, args: SetPoolsActiveInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetPoolsActiveInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetPoolsActiveOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetPoolsActiveFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootDeployPairFunction(_FunctionAbi):
    def with_args(self, args: DeployPairInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> DeployPairInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DeployPairOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootDeployPairFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootDeployStablePoolFunction(_FunctionAbi):
    def with_args(self, args: DeployStablePoolInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> DeployStablePoolInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> DeployStablePoolOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootDeployStablePoolFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetPairFeeParamsFunction(_FunctionAbi):
    def with_args(self, args: SetPairFeeParamsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetPairFeeParamsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetPairFeeParamsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetPairFeeParamsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetPairAmplificationCoefficientFunction(_FunctionAbi):
    def with_args(self, args: SetPairAmplificationCoefficientInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetPairAmplificationCoefficientInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> SetPairAmplificationCoefficientOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetPairAmplificationCoefficientFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootResetTargetGasFunction(_FunctionAbi):
    def with_args(self, args: ResetTargetGasInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> ResetTargetGasInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> ResetTargetGasOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootResetTargetGasFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootOnPoolCreatedFunction(_FunctionAbi):
    def with_args(self, args: OnPoolCreatedInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> OnPoolCreatedInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> OnPoolCreatedOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootOnPoolCreatedFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetOracleOptionsFunction(_FunctionAbi):
    def with_args(self, args: SetOracleOptionsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetOracleOptionsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> SetOracleOptionsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetOracleOptionsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootRemoveLastNPointsFunction(_FunctionAbi):
    def with_args(self, args: RemoveLastNPointsInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> RemoveLastNPointsInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> RemoveLastNPointsOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootRemoveLastNPointsFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootSetWeverInDexTokenVaultFunction(_FunctionAbi):
    def with_args(self, args: SetWeverInDexTokenVaultInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> SetWeverInDexTokenVaultInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(
        self, message_body: _Cell, allow_partial: _Optional[bool] = None
    ) -> SetWeverInDexTokenVaultOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootSetWeverInDexTokenVaultFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootPlatformCodeFunction(_FunctionAbi):
    def with_args(self, args: PlatformCodeInput) -> _FunctionAbiWithArgs:
        return _FunctionAbi.with_args(self, args)

    def decode_input(
        self, message_body: _Cell, internal: bool, allow_partial: _Optional[bool] = None
    ) -> PlatformCodeInput:
        return _FunctionAbi.decode_input(self, message_body, internal, allow_partial)

    def decode_output(self, message_body: _Cell, allow_partial: _Optional[bool] = None) -> PlatformCodeOutput:
        return _FunctionAbi.decode_output(self, message_body, allow_partial)

    def decode_transaction(self, transaction: _Transaction) -> DexRootPlatformCodeFunctionCall:
        return _FunctionAbi.decode_transaction(transaction)


class DexRootAbi:
    @staticmethod
    def constructor() -> DexRootConstructorFunction:
        return DEXROOT_ABI.get_function("constructor")

    @staticmethod
    def get_account_version() -> DexRootGetAccountVersionFunction:
        return DEXROOT_ABI.get_function("getAccountVersion")

    @staticmethod
    def get_account_code() -> DexRootGetAccountCodeFunction:
        return DEXROOT_ABI.get_function("getAccountCode")

    @staticmethod
    def get_pair_version() -> DexRootGetPairVersionFunction:
        return DEXROOT_ABI.get_function("getPairVersion")

    @staticmethod
    def get_pool_version() -> DexRootGetPoolVersionFunction:
        return DEXROOT_ABI.get_function("getPoolVersion")

    @staticmethod
    def get_pair_code() -> DexRootGetPairCodeFunction:
        return DEXROOT_ABI.get_function("getPairCode")

    @staticmethod
    def get_pool_code() -> DexRootGetPoolCodeFunction:
        return DEXROOT_ABI.get_function("getPoolCode")

    @staticmethod
    def get_vault() -> DexRootGetVaultFunction:
        return DEXROOT_ABI.get_function("getVault")

    @staticmethod
    def get_token_vault_code() -> DexRootGetTokenVaultCodeFunction:
        return DEXROOT_ABI.get_function("getTokenVaultCode")

    @staticmethod
    def get_token_vault_version() -> DexRootGetTokenVaultVersionFunction:
        return DEXROOT_ABI.get_function("getTokenVaultVersion")

    @staticmethod
    def get_lp_token_pending_code() -> DexRootGetLpTokenPendingCodeFunction:
        return DEXROOT_ABI.get_function("getLpTokenPendingCode")

    @staticmethod
    def get_lp_token_pending_version() -> DexRootGetLpTokenPendingVersionFunction:
        return DEXROOT_ABI.get_function("getLpTokenPendingVersion")

    @staticmethod
    def get_token_factory() -> DexRootGetTokenFactoryFunction:
        return DEXROOT_ABI.get_function("getTokenFactory")

    @staticmethod
    def is_active() -> DexRootIsActiveFunction:
        return DEXROOT_ABI.get_function("isActive")

    @staticmethod
    def get_owner() -> DexRootGetOwnerFunction:
        return DEXROOT_ABI.get_function("getOwner")

    @staticmethod
    def get_pending_owner() -> DexRootGetPendingOwnerFunction:
        return DEXROOT_ABI.get_function("getPendingOwner")

    @staticmethod
    def get_expected_account_address() -> DexRootGetExpectedAccountAddressFunction:
        return DEXROOT_ABI.get_function("getExpectedAccountAddress")

    @staticmethod
    def get_expected_pair_address() -> DexRootGetExpectedPairAddressFunction:
        return DEXROOT_ABI.get_function("getExpectedPairAddress")

    @staticmethod
    def get_expected_pool_address() -> DexRootGetExpectedPoolAddressFunction:
        return DEXROOT_ABI.get_function("getExpectedPoolAddress")

    @staticmethod
    def get_expected_token_vault_address() -> DexRootGetExpectedTokenVaultAddressFunction:
        return DEXROOT_ABI.get_function("getExpectedTokenVaultAddress")

    @staticmethod
    def get_manager() -> DexRootGetManagerFunction:
        return DEXROOT_ABI.get_function("getManager")

    @staticmethod
    def set_vault_once() -> DexRootSetVaultOnceFunction:
        return DEXROOT_ABI.get_function("setVaultOnce")

    @staticmethod
    def set_active() -> DexRootSetActiveFunction:
        return DEXROOT_ABI.get_function("setActive")

    @staticmethod
    def set_manager() -> DexRootSetManagerFunction:
        return DEXROOT_ABI.get_function("setManager")

    @staticmethod
    def revoke_manager() -> DexRootRevokeManagerFunction:
        return DEXROOT_ABI.get_function("revokeManager")

    @staticmethod
    def transfer_owner() -> DexRootTransferOwnerFunction:
        return DEXROOT_ABI.get_function("transferOwner")

    @staticmethod
    def accept_owner() -> DexRootAcceptOwnerFunction:
        return DEXROOT_ABI.get_function("acceptOwner")

    @staticmethod
    def set_token_factory() -> DexRootSetTokenFactoryFunction:
        return DEXROOT_ABI.get_function("setTokenFactory")

    @staticmethod
    def install_platform_once() -> DexRootInstallPlatformOnceFunction:
        return DEXROOT_ABI.get_function("installPlatformOnce")

    @staticmethod
    def install_or_update_account_code() -> DexRootInstallOrUpdateAccountCodeFunction:
        return DEXROOT_ABI.get_function("installOrUpdateAccountCode")

    @staticmethod
    def install_or_update_pair_code() -> DexRootInstallOrUpdatePairCodeFunction:
        return DEXROOT_ABI.get_function("installOrUpdatePairCode")

    @staticmethod
    def install_or_update_pool_code() -> DexRootInstallOrUpdatePoolCodeFunction:
        return DEXROOT_ABI.get_function("installOrUpdatePoolCode")

    @staticmethod
    def install_or_update_token_vault_code() -> DexRootInstallOrUpdateTokenVaultCodeFunction:
        return DEXROOT_ABI.get_function("installOrUpdateTokenVaultCode")

    @staticmethod
    def install_or_update_lp_token_pending_code() -> DexRootInstallOrUpdateLpTokenPendingCodeFunction:
        return DEXROOT_ABI.get_function("installOrUpdateLpTokenPendingCode")

    @staticmethod
    def upgrade() -> DexRootUpgradeFunction:
        return DEXROOT_ABI.get_function("upgrade")

    @staticmethod
    def reset_gas() -> DexRootResetGasFunction:
        return DEXROOT_ABI.get_function("resetGas")

    @staticmethod
    def deploy_token_vault() -> DexRootDeployTokenVaultFunction:
        return DEXROOT_ABI.get_function("deployTokenVault")

    @staticmethod
    def on_token_vault_deployed() -> DexRootOnTokenVaultDeployedFunction:
        return DEXROOT_ABI.get_function("onTokenVaultDeployed")

    @staticmethod
    def deploy_lp_token() -> DexRootDeployLpTokenFunction:
        return DEXROOT_ABI.get_function("deployLpToken")

    @staticmethod
    def on_liquidity_token_deployed() -> DexRootOnLiquidityTokenDeployedFunction:
        return DEXROOT_ABI.get_function("onLiquidityTokenDeployed")

    @staticmethod
    def on_liquidity_token_not_deployed() -> DexRootOnLiquidityTokenNotDeployedFunction:
        return DEXROOT_ABI.get_function("onLiquidityTokenNotDeployed")

    @staticmethod
    def upgrade_token_vault() -> DexRootUpgradeTokenVaultFunction:
        return DEXROOT_ABI.get_function("upgradeTokenVault")

    @staticmethod
    def upgrade_token_vaults() -> DexRootUpgradeTokenVaultsFunction:
        return DEXROOT_ABI.get_function("upgradeTokenVaults")

    @staticmethod
    def deploy_account() -> DexRootDeployAccountFunction:
        return DEXROOT_ABI.get_function("deployAccount")

    @staticmethod
    def request_upgrade_account() -> DexRootRequestUpgradeAccountFunction:
        return DEXROOT_ABI.get_function("requestUpgradeAccount")

    @staticmethod
    def force_upgrade_account() -> DexRootForceUpgradeAccountFunction:
        return DEXROOT_ABI.get_function("forceUpgradeAccount")

    @staticmethod
    def upgrade_accounts() -> DexRootUpgradeAccountsFunction:
        return DEXROOT_ABI.get_function("upgradeAccounts")

    @staticmethod
    def upgrade_pair() -> DexRootUpgradePairFunction:
        return DEXROOT_ABI.get_function("upgradePair")

    @staticmethod
    def upgrade_pool() -> DexRootUpgradePoolFunction:
        return DEXROOT_ABI.get_function("upgradePool")

    @staticmethod
    def upgrade_pools() -> DexRootUpgradePoolsFunction:
        return DEXROOT_ABI.get_function("upgradePools")

    @staticmethod
    def set_pool_active() -> DexRootSetPoolActiveFunction:
        return DEXROOT_ABI.get_function("setPoolActive")

    @staticmethod
    def set_pools_active() -> DexRootSetPoolsActiveFunction:
        return DEXROOT_ABI.get_function("setPoolsActive")

    @staticmethod
    def deploy_pair() -> DexRootDeployPairFunction:
        return DEXROOT_ABI.get_function("deployPair")

    @staticmethod
    def deploy_stable_pool() -> DexRootDeployStablePoolFunction:
        return DEXROOT_ABI.get_function("deployStablePool")

    @staticmethod
    def set_pair_fee_params() -> DexRootSetPairFeeParamsFunction:
        return DEXROOT_ABI.get_function("setPairFeeParams")

    @staticmethod
    def set_pair_amplification_coefficient() -> DexRootSetPairAmplificationCoefficientFunction:
        return DEXROOT_ABI.get_function("setPairAmplificationCoefficient")

    @staticmethod
    def reset_target_gas() -> DexRootResetTargetGasFunction:
        return DEXROOT_ABI.get_function("resetTargetGas")

    @staticmethod
    def on_pool_created() -> DexRootOnPoolCreatedFunction:
        return DEXROOT_ABI.get_function("onPoolCreated")

    @staticmethod
    def set_oracle_options() -> DexRootSetOracleOptionsFunction:
        return DEXROOT_ABI.get_function("setOracleOptions")

    @staticmethod
    def remove_last_n_points() -> DexRootRemoveLastNPointsFunction:
        return DEXROOT_ABI.get_function("removeLastNPoints")

    @staticmethod
    def set_wever_in_dex_token_vault() -> DexRootSetWeverInDexTokenVaultFunction:
        return DEXROOT_ABI.get_function("setWeverInDexTokenVault")

    @staticmethod
    def platform_code() -> DexRootPlatformCodeFunction:
        return DEXROOT_ABI.get_function("platform_code")
